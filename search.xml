<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[使用iTerm2在Mac上登录远程服务器]]></title>
      <url>http://blog.pikbug.me/2017/06/22/iterm2-macos-00/</url>
      <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本文主要介绍我在工作中，如何通过脚本登录远程服务器的。<a id="more"></a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>iterm2的官网是：<a href="http://www.iterm2.com/" target="_blank" rel="external">http://www.iterm2.com/</a></p>
<p>点击’Download’，下载安装即可。</p>
<p><img src="/2017/06/22/iterm2-macos-00/屏幕快照 2017-06-22 18.30.17.png" alt="屏幕快照 2017-06-22 18.30.17"></p>
<h1 id="配置脚本"><a href="#配置脚本" class="headerlink" title="配置脚本"></a>配置脚本</h1><p>进入根目录下 <code>.ssh</code>文件夹， 假如没有的话，新建一个 <code>.ssh</code> 文件夹。<img src="/2017/06/22/iterm2-macos-00/屏幕快照 2017-06-22 18.35.49.png" alt="屏幕快照 2017-06-22 18.35.49"></p>
<p>通过vim命令，新建一个文件，例如，我们新建一个名字为 <code>example</code> 的文件 。</p>
<p><img src="/2017/06/22/iterm2-macos-00/屏幕快照 2017-06-22 18.43.41.png" alt="屏幕快照 2017-06-22 18.43.41"></p>
<p>文件内容如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#/usr/bin/expect -f</div><div class="line">  set user root</div><div class="line">  set host your_host #Need to modify</div><div class="line">  set password your_password #Need to modify</div><div class="line">  set timeout -1</div><div class="line"></div><div class="line">  spawn ssh $user@$host -p your_port #Need to modify</div><div class="line">  expect &quot;*assword:*&quot;</div><div class="line">  send &quot;$password\r&quot;</div><div class="line">  interact</div><div class="line">  expect eof</div></pre></td></tr></table></figure>
<p>然后 <code>:wq</code> 保存退出。</p>
<h1 id="配置iTerm2"><a href="#配置iTerm2" class="headerlink" title="配置iTerm2"></a>配置iTerm2</h1><p>打开iTerm2，点击 <code>profiles</code></p>
<p><img src="/2017/06/22/iterm2-macos-00/屏幕快照 2017-06-22 18.47.24.png" alt="屏幕快照 2017-06-22 18.47.24"></p>
<p>然后打开如下界面：</p>
<p><img src="/2017/06/22/iterm2-macos-00/屏幕快照_2017-06-22_18_48_50.png" alt="屏幕快照_2017-06-22_18_48_50"></p>
<p>然后点击 <code>Edit Profiles...</code></p>
<p>进入如下界面</p>
<p><img src="/2017/06/22/iterm2-macos-00/QQ20170622-185647@2x.png" alt="QQ20170622-185647@2x"></p>
<p>按照图中的介绍进行操作：</p>
<ul>
<li>第一步：点击添加</li>
<li>第二步：对姓名进行自定义</li>
<li>第三步：点击 <code>command</code> 在后面的框中添加执行命令 <code>expect ~/.ssh/example</code> 即可。</li>
</ul>
<p><strong>需要注意的是：</strong> 第一次登录需要手动登录，也就是通过ssh命令登录。</p>
<p>可以参考这篇文章:<a href="http://blog.csdn.net/edward_qing_lee/article/details/23133331" target="_blank" rel="external">Linux ssh登录命令</a>。</p>
<p>这样就可以登录远程服务器了。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> Linux </category>
            
            <category> macOS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Linux </tag>
            
            <tag> macOS </tag>
            
            <tag> iTerm2 </tag>
            
            <tag> 工作 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我眼中的pm2命令]]></title>
      <url>http://blog.pikbug.me/2017/06/15/pm2/</url>
      <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>PM2是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。<a id="more"></a></p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install pm2 -g</div></pre></td></tr></table></figure>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><h2 id="启动进程"><a href="#启动进程" class="headerlink" title="启动进程"></a>启动进程</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 start <span class="string">[app.js | www]</span> <span class="string">[-i 4]</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong></p>
<ul>
<li>需要注意的是 <code>app.js</code> 文件和 <code>www</code> 文件一般不在一个文件夹中，注意路径</li>
<li>-i 启用多少个实例，可用于负载均衡。如果<code>-i 0</code>或者<code>-i max</code>，则根据当前机器核数确定实例数目。</li>
<li>参考补充说明：<ul>
<li><code>--watch</code>：监听应用目录的变化，一旦发生变化，自动重启。如果要精确监听、不见听的目录，最好通过配置文件。</li>
<li><code>-i --instances</code>：启用多少个实例，可用于负载均衡。如果<code>-i 0</code>或者<code>-i max</code>，则根据当前机器核数确定实例数目。</li>
<li><code>--ignore-watch</code>：排除监听的目录/文件，可以是特定的文件名，也可以是正则。比如<code>--ignore-watch=&quot;test node_modules &quot;some scripts&quot;&quot;</code></li>
<li><code>-n --name</code>：应用的名称。查看应用信息的时候可以用到。</li>
<li><code>-o --output &lt;path&gt;</code>：标准输出日志文件的路径。</li>
<li><code>-e --error &lt;path&gt;</code>：错误输出日志文件的路径。</li>
<li><code>--interpreter &lt;interpreter&gt;</code>：the interpreter pm2 should use for executing app (bash, python…)。比如你用的coffee script来编写应用。</li>
</ul>
</li>
</ul>
</blockquote>
<h2 id="重启进程"><a href="#重启进程" class="headerlink" title="重启进程"></a>重启进程</h2><p>热更新</p>
<figure class="highlight coq"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 restart [app.js | <span class="type">www</span> | <span class="type">app</span>-id]</div></pre></td></tr></table></figure>
<p>冷更新</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p<span class="name">m2</span> reload</div></pre></td></tr></table></figure>
<h2 id="查看当前的服务进程"><a href="#查看当前的服务进程" class="headerlink" title="查看当前的服务进程"></a>查看当前的服务进程</h2><p>可以查看应用的名字或者进程id。</p>
<p>第一种：</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p<span class="name">m2</span> ls</div></pre></td></tr></table></figure>
<p><img src="/2017/06/15/pm2/pm2-ls.png" alt="屏幕快照_2017-06-15_20_21_46">第二种：</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 <span class="built_in">list</span></div></pre></td></tr></table></figure>
<p><img src="/2017/06/15/pm2/pm2-list.png" alt="pm2-list"></p>
<h2 id="停止应用"><a href="#停止应用" class="headerlink" title="停止应用"></a>停止应用</h2><p>停止指定的应用</p>
<figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 stop [app_name <span class="string">| app_id]</span></div></pre></td></tr></table></figure>
<p>停止所有应用</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pm2 <span class="keyword">stop</span> <span class="built_in">all</span></div></pre></td></tr></table></figure>
<h2 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h2><figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p<span class="name">m2</span> logs</div></pre></td></tr></table></figure>
<blockquote>
<p>补充：运行记录日志存放在<code>~/.pm2/logs/</code> 中</p>
</blockquote>
<p><img src="/2017/06/15/pm2/pm2-logs.png" alt="pm2-logs"></p>
<blockquote>
<p>日志文件格式：</p>
<ul>
<li>错误日志：{app_name}-error-{id}.log</li>
</ul>
<ul>
<li>其他日志：{app_name}-out-{id}.log</li>
</ul>
</blockquote>
<h2 id="监控-monitor"><a href="#监控-monitor" class="headerlink" title="监控(monitor)"></a>监控(monitor)</h2><p>运行如下命令，查看当前通过pm2运行的进程的状态。</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">p<span class="name">m2</span> mo<span class="symbol">nit</span></div></pre></td></tr></table></figure>
<p><img src="/2017/06/15/pm2/pm2-monit.png" alt="pm2-monit"></p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://imweb.io/topic/57c8cbb27f226f687b365636" target="_blank" rel="external">PM2实用入门指南</a></li>
<li><a href="https://github.com/Unitech/pm2" target="_blank" rel="external">https://github.com/Unitech/pm2</a></li>
<li><a href="http://feyy.github.io/2016/01/pm2-basic/" target="_blank" rel="external">pm2基础命令</a></li>
<li><a href="http://pm2.keymetrics.io/docs/advanced/pm2-module-system/" target="_blank" rel="external">官方文档</a></li>
<li><a href="https://www.douban.com/note/314200231/" target="_blank" rel="external">PM2 介绍</a></li>
</ol>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> JavaScript </category>
            
            <category> Node.js </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 工作 </tag>
            
            <tag> Node.js </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript算法试题系列-10]]></title>
      <url>http://blog.pikbug.me/2017/06/15/JavaScript-Algorithm-10/</url>
      <content type="html"><![CDATA[<p>问题描述：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数字判断是否为 2 的指数值isPowerOfTwo(4); // true</span></div><div class="line">isPowerOfTwo(<span class="number">64</span>); <span class="comment">// true</span></div><div class="line">isPowerOfTwo(<span class="number">1</span>); <span class="comment">// true</span></div><div class="line">isPowerOfTwo(<span class="number">0</span>); <span class="comment">// false</span></div><div class="line">isPowerOfTwo(<span class="number">-1</span>); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p>解答：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// For the non-zero case:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPowerOfTwo</span>(<span class="params">number</span>) </span>&#123;</div><div class="line">  <span class="comment">// `&amp;` uses the bitwise n.</span></div><div class="line">  <span class="comment">// In the case of number = 4; the expression would be identical to:</span></div><div class="line">  <span class="comment">// `return (4 &amp; 3 === 0)`</span></div><div class="line">  <span class="comment">// In bitwise, 4 is 100, and 3 is 011. Using &amp;, if two values at the same</span></div><div class="line">  <span class="comment">// spot is 1, then result is 1, else 0. In this case, it would return 000,</span></div><div class="line">  <span class="comment">// and thus, 4 satisfies are expression.</span></div><div class="line">  <span class="comment">// In turn, if the expression is `return (5 &amp; 4 === 0)`, it would be false</span></div><div class="line">  <span class="comment">// since it returns 101 &amp; 100 = 100 (NOT === 0)</span></div><div class="line"></div><div class="line">  <span class="keyword">return</span> number &amp; (number - <span class="number">1</span>) === <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// For zero-case:</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPowerOfTwoZeroCase</span>(<span class="params">number</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> (number !== <span class="number">0</span>) &amp;&amp; ((number &amp; (number - <span class="number">1</span>)) === <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript算法试题系列-09]]></title>
      <url>http://blog.pikbug.me/2017/06/15/JavaScript-Algorithm-09/</url>
      <content type="html"><![CDATA[<p>二分法搜索：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 二分搜索function</span></div><div class="line"> recursiveBinarySearch(array, value, leftPosition, rightPosition) &#123;</div><div class="line">  <span class="comment">// Value DNE</span></div><div class="line">  <span class="keyword">if</span> (leftPosition &gt; rightPosition) <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line"></div><div class="line">  <span class="keyword">var</span> middlePivot = <span class="built_in">Math</span>.floor((leftPosition + rightPosition) / <span class="number">2</span>);</div><div class="line">  <span class="keyword">if</span> (array[middlePivot] === value) &#123;</div><div class="line">    <span class="keyword">return</span> middlePivot;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (array[middlePivot] &gt; value) &#123;</div><div class="line">    <span class="keyword">return</span> recursiveBinarySearch(array, value, leftPosition, middlePivot - <span class="number">1</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> recursiveBinarySearch(array, value, middlePivot + <span class="number">1</span>, rightPosition);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript算法试题系列-08]]></title>
      <url>http://blog.pikbug.me/2017/06/15/JavaScript-Algorithm-08/</url>
      <content type="html"><![CDATA[<p>问题描述:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 递归二进制转换通过某个递归函数将输入的数字转化为二进制字符串：decimalToBinary(3); // 11</span></div><div class="line">decimalToBinary(<span class="number">8</span>); <span class="comment">// 1000</span></div><div class="line">decimalToBinary(<span class="number">1000</span>); <span class="comment">// 1111101000</span></div></pre></td></tr></table></figure>
<p>解答：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">decimalToBinary</span>(<span class="params">digit</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(digit &gt;= <span class="number">1</span>) &#123;</div><div class="line">    <span class="comment">// If digit is not divisible by 2 then recursively return proceeding</span></div><div class="line">    <span class="comment">// binary of the digit minus 1, 1 is added for the leftover 1 digit</span></div><div class="line">    <span class="keyword">if</span> (digit % <span class="number">2</span>) &#123;</div><div class="line">      <span class="keyword">return</span> decimalToBinary((digit - <span class="number">1</span>) / <span class="number">2</span>) + <span class="number">1</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// Recursively return proceeding binary digits</span></div><div class="line">      <span class="keyword">return</span> decimalToBinary(digit / <span class="number">2</span>) + <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="comment">// Exit condition</span></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript算法试题系列-07]]></title>
      <url>http://blog.pikbug.me/2017/06/15/JavaScript-Algorithm-07/</url>
      <content type="html"><![CDATA[<p>问题描述：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 判断大括号是否闭合创建一个函数来判断给定的表达式中的大括号是否闭合：</span></div><div class="line"><span class="keyword">var</span> expression = <span class="string">"&#123;&#123;&#125;&#125;&#123;&#125;&#123;&#125;"</span>;</div><div class="line"><span class="keyword">var</span> expressionFalse = <span class="string">"&#123;&#125;&#123;&#123;&#125;"</span>;</div><div class="line"></div><div class="line">isBalanced(expression); <span class="comment">// true</span></div><div class="line">isBalanced(expressionFalse); <span class="comment">// false</span></div><div class="line">isBalanced(<span class="string">""</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>解答：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBalanced</span>(<span class="params">expression</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> checkString = expression;</div><div class="line">  <span class="keyword">var</span> stack = [];</div><div class="line"></div><div class="line">  <span class="comment">// If empty, parentheses are technically balanced</span></div><div class="line">  <span class="keyword">if</span> (checkString.length &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line"></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; checkString.length; i++) &#123;</div><div class="line">    <span class="keyword">if</span>(checkString[i] === <span class="string">'&#123;'</span>) &#123;</div><div class="line">      stack.push(checkString[i]);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (checkString[i] === <span class="string">'&#125;'</span>) &#123;</div><div class="line">      <span class="comment">// Pop on an empty array is undefined</span></div><div class="line">      <span class="keyword">if</span> (stack.length &gt; <span class="number">0</span>) &#123;</div><div class="line">        stack.pop();</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// If the array is not empty, it is not balanced</span></div><div class="line">  <span class="keyword">if</span> (stack.pop()) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript算法试题系列-06]]></title>
      <url>http://blog.pikbug.me/2017/06/15/JavaScript-Algorithm-06/</url>
      <content type="html"><![CDATA[<p>题目要求：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 栈与队列使用两个栈实现入队与出队var inputStack = []; // First stack</span></div><div class="line"><span class="keyword">var</span> outputStack = []; <span class="comment">// Second stack</span></div><div class="line"></div><div class="line"><span class="comment">// For enqueue, just push the item into the first stack</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">enqueue</span>(<span class="params">stackInput, item</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> stackInput.push(item);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>解答：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">dequeue</span>(<span class="params">stackInput, stackOutput</span>) </span>&#123;</div><div class="line">  <span class="comment">// Reverse the stack such that the first element of the output stack is the</span></div><div class="line">  <span class="comment">// last element of the input stack. After that, pop the top of the output to</span></div><div class="line">  <span class="comment">// get the first element that was ever pushed into the input stack</span></div><div class="line">  <span class="keyword">if</span> (stackOutput.length &lt;= <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">while</span>(stackInput.length &gt; <span class="number">0</span>) &#123;</div><div class="line">      <span class="keyword">var</span> elementToOutput = stackInput.pop();</div><div class="line">      stackOutput.push(elementToOutput);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> stackOutput.pop();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript算法试题系列-05]]></title>
      <url>http://blog.pikbug.me/2017/06/15/JavaScript-Algorithm-05/</url>
      <content type="html"><![CDATA[<p>题目要求：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 会问字符串判断某个字符串是否为回文字符串，譬如racecar与race car都是回文字符串：isPalindrome("racecar"); // true</span></div><div class="line">isPalindrome(<span class="string">"race Car"</span>); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>解答：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPalindrome</span>(<span class="params">word</span>) </span>&#123;</div><div class="line">  <span class="comment">// Replace all non-letter chars with "" and change to lowercase</span></div><div class="line">  <span class="keyword">var</span> lettersOnly = word.toLowerCase().replace(<span class="regexp">/\s/g</span>, <span class="string">""</span>);</div><div class="line"></div><div class="line">  <span class="comment">// Compare the string with the reversed version of the string</span></div><div class="line">  <span class="keyword">return</span> lettersOnly === lettersOnly.split(<span class="string">""</span>).reverse().join(<span class="string">""</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript算法试题系列-04]]></title>
      <url>http://blog.pikbug.me/2017/06/15/JavaScript-Algorithm-04/</url>
      <content type="html"><![CDATA[<p>题目要求：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 乱序同字母字符串给定两个字符串，判断是否颠倒字母而成的字符串，譬如Mary与Army就是同字母而顺序颠倒：var firstWord = "Mary";</span></div><div class="line"><span class="keyword">var</span> secondWord = <span class="string">"Army"</span>;</div><div class="line"></div><div class="line">isAnagram(firstWord, secondWord); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>解答：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAnagram</span>(<span class="params">first, second</span>) </span>&#123;</div><div class="line">  <span class="comment">// For case insensitivity, change both words to lowercase.</span></div><div class="line">  <span class="keyword">var</span> a = first.toLowerCase();</div><div class="line">  <span class="keyword">var</span> b = second.toLowerCase();</div><div class="line"></div><div class="line">  <span class="comment">// Sort the strings, and join the resulting array to a string. Compare the results</span></div><div class="line">  a = a.split(<span class="string">""</span>).sort().join(<span class="string">""</span>);</div><div class="line">  b = b.split(<span class="string">""</span>).sort().join(<span class="string">""</span>);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> a === b;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript算法试题系列-03]]></title>
      <url>http://blog.pikbug.me/2017/06/15/JavaScript-Algorithm-03/</url>
      <content type="html"><![CDATA[<p>题目要求：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 字符串颠倒字符串给定某个字符串，要求将其中单词倒转之后然后输出，譬如"Welcome to this Javascript Guide!" 应该输出为 "emocleW ot siht tpircsavaJ !ediuG"。var string = "Welcome to this Javascript Guide!";</span></div><div class="line"></div><div class="line"><span class="comment">// Output becomes !ediuG tpircsavaJ siht ot emocleW</span></div><div class="line"><span class="keyword">var</span> reverseEntireSentence = reverseBySeparator(string, <span class="string">""</span>);</div><div class="line"></div><div class="line"><span class="comment">// Output becomes emocleW ot siht tpircsavaJ !ediuG</span></div><div class="line"><span class="keyword">var</span> reverseEachWord = reverseBySeparator(reverseEntireSentence, <span class="string">" "</span>);</div></pre></td></tr></table></figure>
<p>解答：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">reverseBySeparator</span>(<span class="params">string, separator</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> string.split(separator).reverse().join(separator);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript算法试题系列-02]]></title>
      <url>http://blog.pikbug.me/2017/06/15/JavaScript-Algorithm-02/</url>
      <content type="html"><![CDATA[<p>题目要求：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 数组交集给定两个数组，要求求出两个数组的交集，注意，交集中的元素应该是唯一的。var firstArray = [2, 2, 4, 1];</span></div><div class="line"><span class="keyword">var</span> secondArray = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">2</span>];</div><div class="line"></div><div class="line">intersection(firstArray, secondArray); <span class="comment">// [2, 1]</span></div></pre></td></tr></table></figure>
<p>解答：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">intersection</span>(<span class="params">firstArray, secondArray</span>) </span>&#123;</div><div class="line">  <span class="comment">// The logic here is to create a hashmap with the elements of the firstArray as the keys.</span></div><div class="line">  <span class="comment">// After that, you can use the hashmap's O(1) look up time to check if the element exists in the hash</span></div><div class="line">  <span class="comment">// If it does exist, add that element to the new array.</span></div><div class="line"></div><div class="line">  <span class="keyword">var</span> hashmap = &#123;&#125;;</div><div class="line">  <span class="keyword">var</span> intersectionArray = [];</div><div class="line"></div><div class="line">  firstArray.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    hashmap[element] = <span class="number">1</span>;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="comment">// Since we only want to push unique elements in our case... we can implement a counter to keep track of what we already added</span></div><div class="line">  secondArray.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">element</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (hashmap[element] === <span class="number">1</span>) &#123;</div><div class="line">      intersectionArray.push(element);</div><div class="line">      hashmap[element]++;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  <span class="keyword">return</span> intersectionArray;</div><div class="line"></div><div class="line">  <span class="comment">// Time complexity O(n), Space complexity O(n)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript算法试题系列-01]]></title>
      <url>http://blog.pikbug.me/2017/06/15/JavaScript-Algorithm-01/</url>
      <content type="html"><![CDATA[<p>题目要求：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> firstArray = [<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>];</div><div class="line"><span class="keyword">var</span> secondArray = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>];</div><div class="line"><span class="keyword">var</span> thirdArray = [<span class="number">-2</span>, <span class="number">-2</span>, <span class="number">-3</span>, <span class="number">2</span>];</div><div class="line"></div><div class="line">productExceptSelf(firstArray); <span class="comment">// [8, 8, 4, 16]</span></div><div class="line">productExceptSelf(secondArray); <span class="comment">// [0, 0, 0, 0]</span></div><div class="line">productExceptSelf(thirdArray); <span class="comment">// [12, 12, 8, -12]</span></div></pre></td></tr></table></figure>
<p>解答：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">productExceptSelf</span>(<span class="params">numArray</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> product = <span class="number">1</span>;</div><div class="line">  <span class="keyword">var</span> size = numArray.length;</div><div class="line">  <span class="keyword">var</span> output = [];</div><div class="line"></div><div class="line">  <span class="comment">// From first array: [1, 2, 4, 16]</span></div><div class="line">  <span class="comment">// The last number in this case is already in the right spot (allows for us)</span></div><div class="line">  <span class="comment">// to just multiply by 1 in the next step.</span></div><div class="line">  <span class="comment">// This step essentially gets the product to the left of the index at index + 1</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> x = <span class="number">0</span>; x &lt; size; x++) &#123;</div><div class="line">      output.push(product);</div><div class="line">      product = product * numArray[x];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">// From the back, we multiply the current output element (which represents the product</span></div><div class="line">  <span class="comment">// on the left of the index, and multiplies it by the product on the right of the element)</span></div><div class="line">  <span class="keyword">var</span> product = <span class="number">1</span>;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = size - <span class="number">1</span>; i &gt; <span class="number">-1</span>; i--) &#123;</div><div class="line">      output[i] = output[i] * product;</div><div class="line">      product = product * numArray[i];</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> output;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构与算法 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[闭包]]></title>
      <url>http://blog.pikbug.me/2017/06/06/closure/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote>
<p><em>闭包</em> 是指有权访问另一个函数作用域中的变量的函数。<a id="more"></a></p>
</blockquote>
<h2 id="创建闭包的方式"><a href="#创建闭包的方式" class="headerlink" title="创建闭包的方式"></a>创建闭包的方式</h2><h2 id="常见方式"><a href="#常见方式" class="headerlink" title="常见方式"></a>常见方式</h2><p>在一个函数内部创建另外一个函数，演示如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createComparisonFunction</span>(<span class="params">propertyName</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">object1, object2</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> value1 = object1[propertyName];</div><div class="line">    <span class="keyword">var</span> value2 = object2[propertyName];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (value1 &lt; value2) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">-1</span></div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">1</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码中三四行代码所在的匿名函数可以访问外部函数也就是 <code>createComparisonFunction</code> 的变量 <code>propertyName</code> 。</p>
<h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>本质是指向变量对象的指针列表，它只引用但不实际包含变量对象。</p>
<p>包含：本地活动对象和全局变量对象。</p>
<p>当某个函数被调用的时候，会创建一个执行环境以及对应的作用域链。然后，使用 <code>argument</code> 和其他命名参数值来初始化函数的活动对象。但在作用域链中，外部函数的活动对象始终处于第二位，外部函数的外部函数的活动对象处于第三位，······直至作为作用域终点的全局执行环境。</p>
<h3 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">value1, value2</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (value1 &lt; value2) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> result = compare(<span class="number">5</span>, <span class="number">10</span>);</div></pre></td></tr></table></figure>
<blockquote>
<p>解释：定义了一个 <code>compare()</code> 函数，然后又在全局作用域中调用了它。当调用 <code>compare()</code> 的时候，会创建一个包含 <code>arguments</code> 、 <code>value1</code> 和 <code>value2</code>的活动对象。全局执行环境的变量对象（包含 <code>result</code> 和 <code>compare</code> ）在 <code>compare()</code> 执行环境的作用域链中则处于第二位。如下图所示。</p>
</blockquote>
<p><img src="/2017/06/06/closure/IMG_8921.JPG" alt="函数执行的作用域链"></p>
<h2 id="作用域链小结"><a href="#作用域链小结" class="headerlink" title="作用域链小结"></a>作用域链小结</h2><p>一般说来，在函数中访问一个变量的时候，就会从作用域链中搜索具有相应名字的变量。一般情况下，局部活动对象就会被销毁，内存中仅保存着全局作用域。但是，闭包有所不同。</p>
<h2 id="闭包小结"><a href="#闭包小结" class="headerlink" title="闭包小结"></a>闭包小结</h2><p>在另一个函数的内部定义的函数会将包含函数（即外部函数）的活动对象添加到它的作用域链中。</p>
<p><img src="/2017/06/06/closure/IMG_8922.JPG" alt="函数执行的作用域链"></p>
<p>匿名函数从 <code>createComparisonFunction()</code> 中被返回之后，它的作用域链被初始化为包含 <code>createComparisonFunction()</code> 函数的活动对象和全局变量对象。匿名函数可以访问 <code>createComparisonFunction()</code> 中定义的所有变量。更重要的是， <code>createComparisonFunction()</code> 函数执行完毕后，期活动对象不会被销毁，因为匿名函数的作用域链仍然在引用这个活动对象。</p>
<p><strong>换句话说</strong>，<code>createComparisonFunction()</code> 函数返回后，其执行环境的作用域链会被销毁，但它的活动对象仍然留在内存中；直到匿名函数被销毁后， <code>createComparisonFunction()</code> 的活动对象才会被销毁。</p>
<blockquote>
<p>提示： 闭包会携带包含它的函数的作用域，会比其他函数占用更多的内存。过多的使用闭包可能会导致内存占用过高。</p>
</blockquote>
<h2 id="闭包与变量"><a href="#闭包与变量" class="headerlink" title="闭包与变量"></a>闭包与变量</h2><p>闭包只能取得包含函数中任何变量的最后一个值。</p>
<h3 id="一个🌰"><a href="#一个🌰" class="headerlink" title="一个🌰"></a>一个🌰</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = [];</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    result[i] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> i;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>表面上每个函数会返回自己的索引值。其实，每个函数都会返回10.</p>
<p>这是因为每个函数的作用域链中都保存着 <code>createFunction()</code> 函数的活动对象，所以它们引用的都是同一个变量 <code>i</code> 。</p>
<p>假如要想达到预期，应该如下修改代码：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createFunction</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> result = [];</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</div><div class="line">    result[i] = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> num;</div><div class="line">      &#125;;</div><div class="line">    &#125;(i);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript高级程序设计（第三版） </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[查看物理CPU个数 查看每个物理CPU中core的个数(即核数) 查看逻辑CPU的个数]]></title>
      <url>http://blog.pikbug.me/2017/06/05/the-number-of-cpu/</url>
      <content type="html"><![CDATA[<blockquote>
<p>查看物理CPU个数 查看每个物理CPU中core的个数(即核数) 查看逻辑CPU的个数🦀<a id="more"></a></p>
</blockquote>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 查看物理CPU个数</span></div><div class="line"></div><div class="line">  cat /proc/cpuinfo| <span class="keyword">grep</span> <span class="string">"physical id"</span> | <span class="keyword">sort</span>| uni<span class="string">q | wc -l</span></div><div class="line"></div><div class="line"># 查看每个物理CPU中core的个数(即核数)</div><div class="line"></div><div class="line">  cat /proc/cpuinfo| <span class="keyword">grep</span> <span class="string">"cpu cores"</span>| uniq</div><div class="line"></div><div class="line"><span class="comment"># 查看逻辑CPU的个数</span></div><div class="line"></div><div class="line">  cat /proc/cpuinfo| <span class="keyword">grep</span> <span class="string">"processor"</span>| wc -l</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[文件的压缩与打包]]></title>
      <url>http://blog.pikbug.me/2017/06/05/File-compression-and-packaging/</url>
      <content type="html"><![CDATA[<p>该篇文章主要学习和总结了Linux文件的打包与压缩🤡<a id="more"></a></p>
<h2 id="压缩命令"><a href="#压缩命令" class="headerlink" title="压缩命令"></a>压缩命令</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">Compress</span><span class="params">(默认不安装)</span></span></div><div class="line"></div><div class="line">gzip zcat</div><div class="line"></div><div class="line">bzip bzcat</div></pre></td></tr></table></figure>
<h2 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h2><ul>
<li>tar 打包后的文件会增大 tar 没有压缩功能</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar cvf hosts<span class="selector-class">.tar</span> hosts 保留原文件</div><div class="line"></div><div class="line">tar cvf hosts<span class="selector-class">.tar</span> hosts —remove-files 不保留原文件</div></pre></td></tr></table></figure>
<ul>
<li>查看打包好的归档文件 tar tvf hosts.tar</li>
</ul>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">tar xvf host<span class="selector-class">.tar</span> 解开归档文件</div><div class="line"></div><div class="line">tar xvf host<span class="selector-class">.tar</span> -C 目的文件夹   将文件解压到指定文件夹</div><div class="line"></div><div class="line">tar xvf hosts 指定要解压的文件（部分文件）</div><div class="line"></div><div class="line">tar cvf xx<span class="selector-class">.tar</span> file1 file2 file3 归档对个任务</div></pre></td></tr></table></figure>
<ul>
<li>既要打包又要压缩</li>
</ul>
<blockquote>
<p>打包文件附带压缩功能</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">tar</span> <span class="selector-tag">zcvf</span> <span class="selector-tag">xx</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> * —<span class="selector-tag">remove-files</span></div></pre></td></tr></table></figure>
<h2 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">tar</span> <span class="selector-tag">zxvf</span> <span class="selector-tag">xx</span><span class="selector-class">.tar</span><span class="selector-class">.gz</span> * —<span class="selector-tag">remove-files</span></div></pre></td></tr></table></figure>
<h2 id="打包-1"><a href="#打包-1" class="headerlink" title="打包"></a>打包</h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar jcvf xx<span class="selector-class">.tar</span><span class="selector-class">.bz2</span> *</div></pre></td></tr></table></figure>
<h2 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">tar</span> <span class="selector-tag">jxvf</span> <span class="selector-tag">xx</span><span class="selector-class">.tar</span><span class="selector-class">.bz2</span> *</div><div class="line"></div><div class="line"><span class="selector-tag">tar</span> —<span class="selector-tag">help</span></div></pre></td></tr></table></figure>
<h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><ul>
<li><p>三种：完全备份、增量备份、差异备份</p>
</li>
<li><p>数字：低到高 增量备份</p>
<p>高到低 差异备份</p>
</li>
</ul>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dump -数字 数字：<span class="number">0</span><span class="number">-9</span></div></pre></td></tr></table></figure>
<ul>
<li>只会备份数字比他小的数字开始备份 </li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Centos文件系统]]></title>
      <url>http://blog.pikbug.me/2017/06/05/centos-file-system/</url>
      <content type="html"><![CDATA[<blockquote>
<p>该篇文章为学习 <code>Centos</code> 操作命令的记录👾<a id="more"></a></p>
</blockquote>
<h1 id="查看命令"><a href="#查看命令" class="headerlink" title="查看命令"></a>查看命令</h1><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ls -l  <span class="meta">#查看文件的权限</span></div><div class="line">ls -lh <span class="meta">#查看文件的权限和时间（更改时间或者添加时间）</span></div><div class="line">ls -<span class="keyword">ld</span> <span class="meta">#d代表目录</span></div></pre></td></tr></table></figure>
<h1 id="更改文件权限命令"><a href="#更改文件权限命令" class="headerlink" title="更改文件权限命令"></a>更改文件权限命令</h1><figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">chmod</span>    u</div><div class="line"><span class="keyword">chmod</span>    g</div><div class="line"><span class="keyword">chmod</span>    o</div><div class="line"><span class="keyword">chmod</span>    ugo(a)      +<span class="regexp">/-/</span>=  r w <span class="keyword">x</span>     文件名</div></pre></td></tr></table></figure>
<blockquote>
<p>说明：</p>
<ul>
<li><p>+：添加，-：去除 =：原权限改为 等号后面的权限</p>
</li>
<li><p>r  w  x</p>
<p>4  2  1</p>
</li>
</ul>
<hr>
<pre><code>u       g       o
</code></pre><p>  r w -  r - -    r - -</p>
<pre><code>6       4       4
</code></pre><ul>
<li><p>chmod 644 文件名 # 命令格式</p>
</li>
<li><p>chmod -R 755 递归改变权限 改变当前文件的权限，同时改变文件目录下所有文件的权限</p>
</li>
<li><p>改变文件所有者chown 所有者 要改变的文件名</p>
</li>
<li><p>chown -R </p>
<p> #说明：递归改变权限 改变当前文件的所有者，同时改变文件目录下所有文件的所有者</p>
</li>
<li><p>改变用户和组用户</p>
<p>chown username.(:)groupname  filename</p>
</li>
<li><p>改变组用户</p>
<p>chgrp groupname filename</p>
</li>
<li><p>r w x:对于一个文件来说，具有可执行权限，所有者可以执行他。对于一个文件夹来说，可执行意味着，是否可以进入（cd）的权限</p>
</li>
</ul>
</blockquote>
<h1 id="扩展名"><a href="#扩展名" class="headerlink" title="扩展名"></a>扩展名</h1><p>在Linux里不是很重要。</p>
<p>查看文件类型</p>
<p>file filename</p>
<h1 id="Linux目录结构"><a href="#Linux目录结构" class="headerlink" title="Linux目录结构"></a>Linux目录结构</h1><ul>
<li>bin目录：存放二进制文件。</li>
<li>boot目录：存放的是系统以及内核启动相关的文件。</li>
<li>dev目录：设备文件 优盘等</li>
<li>etc目录：配置文件</li>
<li>home目录：家目录</li>
<li>lib目录：存放的是链接库文件</li>
<li>lost+found目录</li>
<li>media目录：系统挂载点，比如，插如优盘桌面会出来一个图标，优盘挂载在此处。</li>
<li>mnt目录：手动去挂载的地方 约定俗成的地方。</li>
<li>opt目录：源码包安装程序安装在此处。假如不指名安装地址安装在usr/local中</li>
<li>proc目录：内核的参数，不占用磁盘大小</li>
<li>root目录：root用户的家目录</li>
<li>sbin目录：类似于bin，存放的是系统管理员用到的命令</li>
<li>tmp目录：临时文件</li>
<li>usr目录：默认情况下 程序安装在此次</li>
<li>var目录：缓存文件 日志文件  数据库文件等文件</li>
</ul>
<blockquote>
<p>所有的Linux发行版本文件系统都是差不多的 都遵循FHS标准。</p>
</blockquote>
<ul>
<li><p>相对路径与绝对路径</p>
<p>.  当前路径</p>
<p>.. 上一层路径</p>
</li>
</ul>
<p>uname</p>
<h1 id="查看系统信息"><a href="#查看系统信息" class="headerlink" title="查看系统信息"></a>查看系统信息</h1><h2 id="拷贝命令"><a href="#拷贝命令" class="headerlink" title="拷贝命令"></a>拷贝命令</h2><p><strong>格式：</strong> </p>
<figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cp [选项].....   /path1/.../xx    /path/.../yy</div><div class="line"></div><div class="line">cp -rf …… 强制复制  r 递归 f 强制</div><div class="line"></div><div class="line">cp -p …… 把属性也复制过去</div></pre></td></tr></table></figure>
<h2 id="剪切命令"><a href="#剪切命令" class="headerlink" title="剪切命令"></a>剪切命令</h2><figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mv <span class="string">[选项]</span> path1 path2</div></pre></td></tr></table></figure>
<h2 id="cat命令"><a href="#cat命令" class="headerlink" title="cat命令"></a>cat命令</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">cat</span> 适合查看小文件</div><div class="line"></div><div class="line"><span class="keyword">cat</span> -<span class="keyword">n</span> …. 加编号</div><div class="line"></div><div class="line">tac 倒序查看</div><div class="line"></div><div class="line"><span class="keyword">nl</span> = <span class="keyword">cat</span> -<span class="keyword">n</span></div><div class="line"></div><div class="line"><span class="keyword">more</span>/less 可以分屏查看文件信息 适合查看大文件</div><div class="line"></div><div class="line">less可以前后翻 可以查找关键字 支持page up page down home end 键</div><div class="line"></div><div class="line">查看文件信息 head <span class="keyword">man</span></div><div class="line"></div><div class="line">格式：head + filename</div><div class="line"></div><div class="line">head -<span class="keyword">n</span> 5 查看前五行</div><div class="line"></div><div class="line">等同于 head -5</div><div class="line"></div><div class="line">tail -<span class="keyword">n</span> 3 等同于tail -3 查看文件的最后三行</div><div class="line"></div><div class="line">tail -f 等同于 tailf 日志文件 可以实时显示日志文件</div><div class="line"></div><div class="line">退出是 control + c 命令</div><div class="line"></div><div class="line">查看二进制文件 od strings</div></pre></td></tr></table></figure>
<h2 id="touch命令"><a href="#touch命令" class="headerlink" title="touch命令"></a>touch命令</h2><p>touch filename 假如这个文件没有 就会创建这个文件 </p>
<p>假如这个文件存在，就把这个文件的创建/修改时间修改为当前</p>
<p>touch filename </p>
<h2 id="创建文件夹命令"><a href="#创建文件夹命令" class="headerlink" title="创建文件夹命令"></a>创建文件夹命令</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">mkdir</span> dirname</div></pre></td></tr></table></figure>
<h2 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">umask</span> 权限过滤符</div><div class="line"></div><div class="line"><span class="built_in">umask</span> 022 设置过滤值</div><div class="line"></div><div class="line"><span class="built_in">umask</span> -S 设置保留的值</div></pre></td></tr></table></figure>
<h2 id="chattr"><a href="#chattr" class="headerlink" title="chattr"></a>chattr</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">用chattr命令防止系统中某个关键文件被修改：</div><div class="line"></div><div class="line">\# chattr +i /etc/resolv.<span class="keyword">conf</span></div><div class="line"></div><div class="line">lsattr /etc/resolv.<span class="keyword">conf</span></div><div class="line"></div><div class="line">会显示如下属性</div><div class="line"></div><div class="line">----i-------- /etc/resolv.<span class="keyword">conf</span></div><div class="line"></div><div class="line">让某个文件只能往里面追加数据，但不能删除，适用于各种日志文件：</div><div class="line"></div><div class="line">\# chattr +<span class="keyword">a</span> /var/<span class="built_in">log</span>/<span class="keyword">messages</span></div><div class="line"></div><div class="line"><span class="keyword">ll</span> = <span class="keyword">ls</span> -<span class="keyword">l</span></div><div class="line"></div><div class="line">chmod <span class="keyword">u</span>/g/<span class="keyword">o</span>+s filename</div></pre></td></tr></table></figure>
<h2 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h2><figure class="highlight crystal"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">which filename</div><div class="line"></div><div class="line">whereis ordername</div><div class="line"></div><div class="line">whereis -b ordername</div><div class="line"></div><div class="line">whereis -m ordername</div><div class="line"></div><div class="line">locate filename</div><div class="line"></div><div class="line">locate -i  filename  忽略大小写</div><div class="line"></div><div class="line">查找含有filename的文件</div><div class="line"></div><div class="line">他是在 /var/<span class="class"><span class="keyword">lib</span>/<span class="title">mlocate</span>.<span class="title">db</span>中查找 这个数据库每天更新一次</span></div><div class="line"></div><div class="line">可以通过 updatedb 来更新数据库</div><div class="line"></div><div class="line">find dirname  -属性（） value</div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> Linux </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Linux </tag>
            
            <tag> Centos </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git学习笔记✔️04]]></title>
      <url>http://blog.pikbug.me/2017/05/28/learn-git-04/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<p><strong>注意：</strong> 本文是根据 <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的官方网站的Git教程</a> 的学习笔记 <a id="more"></a></p>
<h1 id="『第十五节课』标签的创建"><a href="#『第十五节课』标签的创建" class="headerlink" title="『第十五节课』标签的创建"></a>『第十五节课』标签的创建</h1><p>演示操作：</p>
<p><img src="/2017/05/28/learn-git-04/屏幕快照 2017-05-28 20.45.43.png" alt=""></p>
<p><img src="/2017/05/28/learn-git-04/屏幕快照 2017-05-28 20.33.33.png" alt=""></p>
<p><img src="/2017/05/28/learn-git-04/屏幕快照 2017-05-28 20.37.02.png" alt=""></p>
<blockquote>
<p>总结：</p>
<ul>
<li>命令<code>git tag &lt;name&gt;</code>用于新建一个标签，默认为<code>HEAD</code>，也可以指定一个commit id</li>
<li><code>git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以指定标签信息</li>
<li><code>git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;</code>可以用PGP签名标签</li>
<li>命令<code>git tag</code>可以查看所有标签</li>
</ul>
</blockquote>
<h1 id="『第十六节课』操作标签"><a href="#『第十六节课』操作标签" class="headerlink" title="『第十六节课』操作标签"></a>『第十六节课』操作标签</h1><ul>
<li>命令<code>git push origin &lt;tagname&gt;</code>可以推送一个本地标签；</li>
<li>命令<code>git push origin --tags</code>可以推送全部未推送过的本地标签；</li>
<li>命令<code>git tag -d &lt;tagname&gt;</code>可以删除一个本地标签；</li>
<li>命令<code>git push origin :refs/tags/&lt;tagname&gt;</code>可以删除一个远程标签。</li>
</ul>
<p>演示操作：</p>
<p><img src="/2017/05/28/learn-git-04/屏幕快照 2017-05-28 21.06.06.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[再买二手手机我就是煞笔！]]></title>
      <url>http://blog.pikbug.me/2017/04/24/Remember/</url>
      <content type="html"><![CDATA[<h1 id="再买二手手机我就是煞笔！"><a href="#再买二手手机我就是煞笔！" class="headerlink" title="再买二手手机我就是煞笔！"></a>再买二手手机我就是煞笔！<a id="more"></a></h1>]]></content>
      
        <categories>
            
            <category> 个人日记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git学习笔记✔️03]]></title>
      <url>http://blog.pikbug.me/2017/04/13/learn-git-03/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<blockquote>
<p><strong>注意：</strong> 本文是根据 <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的官方网站的Git教程</a> 的学习笔记 <a id="more"></a></p>
</blockquote>
<h1 id="『第十节课』-分支管理-创建与合并分支"><a href="#『第十节课』-分支管理-创建与合并分支" class="headerlink" title="『第十节课』 分支管理-创建与合并分支"></a>『第十节课』 分支管理-创建与合并分支</h1><p>每次提交，<code>master</code>分支都会向前移动一步，这样，随着你不断提交，<code>master</code>分支的线也越来越长。</p>
<p>当我们创建新的分支，例如<code>dev</code>时，Git新建了一个指针叫<code>dev</code>，指向<code>master</code>相同的提交，再把<code>HEAD</code>指向<code>dev</code>，就表示当前分支在<code>dev</code>上。</p>
<p>假如我们在<code>dev</code>上的工作完成了，就可以把<code>dev</code>合并到<code>master</code>上。Git怎么合并呢？最简单的方法，就是直接把<code>master</code>指向<code>dev</code>的当前提交。</p>
<p>合并完分支后，甚至可以删除<code>dev</code>分支。删除<code>dev</code>分支就是把<code>dev</code>指针给删掉，删掉后，我们就剩下了一条<code>master</code>分支。</p>
<h2 id="Git鼓励大量使用分支："><a href="#Git鼓励大量使用分支：" class="headerlink" title="Git鼓励大量使用分支："></a>Git鼓励大量使用分支：</h2><p>查看分支：<code>git branch</code></p>
<p>创建分支：<code>git branch &lt;name&gt;</code></p>
<p>切换分支：<code>git checkout &lt;name&gt;</code></p>
<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code></p>
<p><code>git checkout</code>命令加上<code>-b</code>参数表示创建并切换，相当于以下两条命令：</p>
<figure class="highlight armasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">branch </span>dev</div><div class="line">$ git checkout dev</div><div class="line"><span class="keyword">Switched </span>to <span class="keyword">branch </span><span class="string">'dev'</span></div></pre></td></tr></table></figure>
<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>
<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>
<h2 id="操作演示："><a href="#操作演示：" class="headerlink" title="操作演示："></a>操作演示：</h2><p><img src="/2017/04/13/learn-git-03/屏幕快照 2017-04-18 15.36.44.png" alt=""></p>
<h1 id="『第十一节课』解决冲突"><a href="#『第十一节课』解决冲突" class="headerlink" title="『第十一节课』解决冲突"></a>『第十一节课』解决冲突</h1><h2 id="操作演示：-1"><a href="#操作演示：-1" class="headerlink" title="操作演示："></a>操作演示：</h2><p><img src="/2017/04/13/learn-git-03/屏幕快照 2017-04-18 15.56.35.png" alt=""></p>
<p><img src="/2017/04/13/learn-git-03/屏幕快照 2017-04-18 15.57.00.png" alt=""></p>
<p>使用 <code>git log --graph --pretty=oneline --abbrev-commit</code> 可以查看分之合并情况：</p>
<p><img src="/2017/04/13/learn-git-03/屏幕快照 2017-04-18 15.54.32.png" alt=""></p>
<h1 id="『第十二节课』Bug分支"><a href="#『第十二节课』Bug分支" class="headerlink" title="『第十二节课』Bug分支"></a>『第十二节课』Bug分支</h1><p>Bug的出现可以通过新建临时的分支来修复Bug，修复之后，合并分支，然后将临时分支删除掉。</p>
<h2 id="操作演示：-2"><a href="#操作演示：-2" class="headerlink" title="操作演示："></a>操作演示：</h2><p><img src="/2017/04/13/learn-git-03/屏幕快照 2017-04-20 14.35.03.png" alt=""></p>
<p><img src="/2017/04/13/learn-git-03/屏幕快照 2017-04-20 14.35.29.png" alt=""></p>
<p><img src="/2017/04/13/learn-git-03/屏幕快照 2017-04-20 14.48.50.png" alt=""></p>
<blockquote>
<p><strong>重点：</strong> 当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场。</p>
</blockquote>
<h1 id="『第十三节课』Feature分支"><a href="#『第十三节课』Feature分支" class="headerlink" title="『第十三节课』Feature分支"></a>『第十三节课』Feature分支</h1><p>当开发新功能的时候推荐使用Feature分支。在这个新建的Feature分支上开发，完成功能开发之后合并分支，最后将Feature分支删除掉。</p>
<p>如果要丢弃一个没有被合并过的分支，可以通过 <code>git branch -D &lt;name&gt;</code> 强行删除。</p>
<h1 id="『第十四节课』多人协作"><a href="#『第十四节课』多人协作" class="headerlink" title="『第十四节课』多人协作"></a>『第十四节课』多人协作</h1><p>可以通过 <code>git remote</code> 命令查看远程仓库的信息；也可以通过 <code>git remote -v</code> 显示更详细的信息。如下图显示。</p>
<p><img src="/2017/04/13/learn-git-03/屏幕快照 2017-05-26 11.36.17.png" alt=""></p>
<h2 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h2><p>可以通过命令 <code>git push origin master</code> 制定推送到远程仓库的对应远程分支。</p>
<blockquote>
<p>注意:</p>
<ul>
<li><code>master</code> 分支是主分支，因此要时刻与远程同步</li>
<li><code>dev</code> 分支是开发分支，开发新功能都在这上面实现，所以也要时刻保持同步</li>
<li><code>bug</code> 分支主要记录着修复的bug分支，没必要同步</li>
<li><code>feature</code> 分支同步与否视情况而定，假如开发的功能和别人一起完成就需要同步到上面去</li>
</ul>
</blockquote>
<h2 id="从远端仓库拉去代码"><a href="#从远端仓库拉去代码" class="headerlink" title="从远端仓库拉去代码"></a>从远端仓库拉去代码</h2><p>执行如下命令：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">git clone <span class="string">https:</span><span class="comment">//github.com/GiHccTpD/test-learn-git</span></div><div class="line">Cloning into <span class="string">'test-learn-git'</span>...</div><div class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">46</span>, done.</div><div class="line"><span class="string">remote:</span> Compressing <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">26</span>/<span class="number">26</span>), done.</div><div class="line"><span class="string">remote:</span> Total <span class="number">46</span> (delta <span class="number">16</span>), reused <span class="number">45</span> (delta <span class="number">15</span>)</div><div class="line">Receiving <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">46</span><span class="regexp">/46), 15.69 KiB | 6 KiB/</span>s, done.</div><div class="line">Resolving <span class="string">deltas:</span> <span class="number">100</span>% (<span class="number">16</span>/<span class="number">16</span>), done.</div></pre></td></tr></table></figure>
<p>从远端仓库拉取的代码，，默认情况下，只能看到 <code>master</code> 分支，可以通过 <code>git branch</code> 命令查看：</p>
<figure class="highlight gams"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">$</span> git branch</div><div class="line"><span class="comment">* master</span></div></pre></td></tr></table></figure>
<p>当需要在 <code>dev</code> 分支上开发的时候， 需要先将 <code>origin</code> 的 <code>dev</code> 分支拉取到本地，命令如下：</p>
<p><code>git checkout -b dev origin/dev</code></p>
<p>当需要吧 <code>dev</code> 分支 <code>push</code> 到远端仓库的时候</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ git <span class="keyword">commit</span> -m <span class="string">"add /usr/bin/env"</span></div><div class="line">[dev <span class="number">291</span>bea8] <span class="keyword">add</span> /usr/<span class="keyword">bin</span>/env</div><div class="line"> <span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">1</span> insertion(+)</div><div class="line">$ git push origin dev</div></pre></td></tr></table></figure>
<blockquote>
<p>总结：</p>
<p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致</p>
</blockquote>
<p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p>
<p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git学习笔记✔️02]]></title>
      <url>http://blog.pikbug.me/2017/04/13/learn-git-02/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<blockquote>
<p><strong>注意：</strong> 本文是根据 <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的官方网站的Git教程</a> 的学习笔记 <a id="more"></a></p>
</blockquote>
<h1 id="『第八节课』添加远程仓库"><a href="#『第八节课』添加远程仓库" class="headerlink" title="『第八节课』添加远程仓库"></a>『第八节课』添加远程仓库</h1><h2 id="添加远端仓库"><a href="#添加远端仓库" class="headerlink" title="添加远端仓库"></a>添加远端仓库</h2><p>新建完成之后：</p>
<p><img src="/2017/04/13/learn-git-02/repo-pic.png" alt="repo"></p>
<h2 id="在本地仓库文件夹📂执行命令-git-remote-add-origin-https-github-com-GiHccTpD-test-learn-git-git"><a href="#在本地仓库文件夹📂执行命令-git-remote-add-origin-https-github-com-GiHccTpD-test-learn-git-git" class="headerlink" title="在本地仓库文件夹📂执行命令 git remote add origin https://github.com/GiHccTpD/test-learn-git.git"></a>在本地仓库文件夹📂执行命令 <code>git remote add origin https://github.com/GiHccTpD/test-learn-git.git</code></h2><p>操作演示请看下面截图</p>
<h2 id="接下来，执行-git-push-u-origin-master-命令"><a href="#接下来，执行-git-push-u-origin-master-命令" class="headerlink" title="接下来，执行 git push -u origin master 命令"></a>接下来，执行 <code>git push -u origin master</code> 命令</h2><p>把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p>
<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
<h2 id="以后，只要执行-git-push-origin-master-就可以了"><a href="#以后，只要执行-git-push-origin-master-就可以了" class="headerlink" title="以后，只要执行 $ git push origin master 就可以了"></a>以后，只要执行 <code>$ git push origin master</code> 就可以了</h2><h2 id="操作代码"><a href="#操作代码" class="headerlink" title="操作代码"></a>操作代码</h2><p><img src="/2017/04/13/learn-git-02/repo-pic-02.png" alt="repo"></p>
<h2 id="远程仓库："><a href="#远程仓库：" class="headerlink" title="远程仓库："></a>远程仓库：</h2><p><img src="/2017/04/13/learn-git-02/repo-pic-03.png" alt="repo"></p>
<h1 id="『第九节课』从远端仓库克隆到本地"><a href="#『第九节课』从远端仓库克隆到本地" class="headerlink" title="『第九节课』从远端仓库克隆到本地"></a>『第九节课』从远端仓库克隆到本地</h1><blockquote>
<ul>
<li>要克隆一个仓库，首先必须知道仓库的地址，然后使用 <code>git clone</code>  命令克隆。</li>
<li>Git支持多种协议，包括 <code>https</code> ，但通过 <code>ssh</code> 支持的原生 <code>git</code>协议速度最快。</li>
</ul>
</blockquote>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[git学习笔记✔️01]]></title>
      <url>http://blog.pikbug.me/2017/04/12/learn-git/</url>
      <content type="html"><![CDATA[<p>[TOC]</p>
<blockquote>
<p><strong>注意：</strong> 本文是根据 <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的官方网站的Git教程</a> 的学习笔记<a id="more"></a></p>
</blockquote>
<h1 id="『第一节课』创建版本库"><a href="#『第一节课』创建版本库" class="headerlink" title="『第一节课』创建版本库"></a>『第一节课』创建版本库</h1><h2 id="初始化一个Git仓库"><a href="#初始化一个Git仓库" class="headerlink" title="初始化一个Git仓库"></a>初始化一个Git仓库</h2><ol>
<li>找一个合适的地方</li>
<li>创建一个文件夹 <code>mkdir learning-git</code></li>
<li>进入该文件夹 <code>cd</code></li>
<li><p>通过<code>git init</code>命令把这个目录变成Git可以管理的仓库 </p>
 <figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">☁  learning-git  git init</div><div class="line">Initialized empty Git repository <span class="keyword">in</span> <span class="regexp">/Users/</span>MiG<span class="regexp">/Documents/</span>Learning<span class="regexp">/Git/</span>learning-git<span class="regexp">/.git/</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong> 此时仓库就创建好了，文件夹下会多了一个名为 <code>.git</code> 的文件夹📂 </p>
</blockquote>
</li>
<li><p>添加一个 <code>README.md</code> 文件 </p>
</li>
<li><p>用 <code>git add README.md</code> 命令将 <code>README.md</code> 将该文件添加到仓库</p>
 <figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">☁  learning-git [master] ⚡ git <span class="keyword">commit</span> -m <span class="string">"add README.md"</span></div><div class="line">[<span class="keyword">master</span> (root-<span class="keyword">commit</span>) a75f826] <span class="keyword">add</span> README.md</div><div class="line"> <span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">2</span> insertions(+)</div><div class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> README.md</div></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p><strong>注意：</strong> <code>-m</code> 后面输入的是本次提交的说明</p>
</blockquote>
<h1 id="『第二节课』查看修改信息"><a href="#『第二节课』查看修改信息" class="headerlink" title="『第二节课』查看修改信息"></a>『第二节课』查看修改信息</h1><h2 id="可以通过-git-status-命令查看仓库的状态："><a href="#可以通过-git-status-命令查看仓库的状态：" class="headerlink" title="可以通过 git status 命令查看仓库的状态："></a>可以通过 <code>git status</code> 命令查看仓库的状态：</h2><p>当我们没有进行修改的时候 输入 <code>git status</code> 可以看到如下输出</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">☁  learning-git [<span class="literal">master</span>] git status</div><div class="line">On branch <span class="keyword">master</span></div><div class="line"><span class="title">nothing</span> to commit, working tree clean</div></pre></td></tr></table></figure>
<h2 id="当我们进行一些修改之后"><a href="#当我们进行一些修改之后" class="headerlink" title="当我们进行一些修改之后:"></a>当我们进行一些修改之后:</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">☁  learning-git [<span class="literal">master</span>] ⚡ git status</div><div class="line">On branch <span class="keyword">master</span></div><div class="line"><span class="title">Changes</span> to be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</div><div class="line"></div><div class="line">	modified:   README.md</div></pre></td></tr></table></figure>
<h2 id="当此时输入-git-diff-README-md-会输出如下信息："><a href="#当此时输入-git-diff-README-md-会输出如下信息：" class="headerlink" title="当此时输入 git diff README.md 会输出如下信息："></a>当此时输入 <code>git diff README.md</code> 会输出如下信息：</h2><figure class="highlight diff"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">diff --git a/README.md b/README.md</div><div class="line">index 6276f73..6abd600 100644</div><div class="line"><span class="comment">--- a/README.md</span></div><div class="line"><span class="comment">+++ b/README.md</span></div><div class="line"><span class="meta">@@ -1,4 +1,4 @@</span></div><div class="line"> Git is a version control system.</div><div class="line"> Git is free software.</div><div class="line"><span class="deletion">-</span></div><div class="line"><span class="addition">+Git is awosome.</span></div><div class="line"> Git is create by Linus.</div></pre></td></tr></table></figure>
<h2 id="此时，输入-git-status-命令查看仓库的状态："><a href="#此时，输入-git-status-命令查看仓库的状态：" class="headerlink" title="此时，输入 git status 命令查看仓库的状态："></a>此时，输入 <code>git status</code> 命令查看仓库的状态：</h2><p>会输出如下信息：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git reset HEAD &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</div><div class="line"></div><div class="line">	modified:   README.md</div><div class="line"></div><div class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> <span class="keyword">commit</span>:</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</div><div class="line">  (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</div><div class="line"></div><div class="line">	modified:   README.md</div></pre></td></tr></table></figure></p>
<p>提示信息没有提交</p>
<h2 id="接下来，输入-git-add-README-md："><a href="#接下来，输入-git-add-README-md：" class="headerlink" title="接下来，输入 git add README.md："></a>接下来，输入 <code>git add README.md</code>：</h2><p>没有提示</p>
<blockquote>
<p>补充： <code>git add</code> 的作用是将提交的文件的信息添加到索引库中</p>
</blockquote>
<h2 id="然后，-输入-git-status："><a href="#然后，-输入-git-status：" class="headerlink" title="然后， 输入 git status："></a>然后， 输入 <code>git status</code>：</h2><p>输出信息如下：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">☁  learning-git [<span class="literal">master</span>] ⚡ git status</div><div class="line">On branch <span class="keyword">master</span></div><div class="line"><span class="title">Changes</span> to be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</div><div class="line"></div><div class="line">	modified:   README.md</div></pre></td></tr></table></figure></p>
<h2 id="然后，-输入-git-commit-m-quot-modify-README-md-quot"><a href="#然后，-输入-git-commit-m-quot-modify-README-md-quot" class="headerlink" title="然后， 输入 git commit -m &quot;modify README.md&quot;"></a>然后， 输入 <code>git commit -m &quot;modify README.md&quot;</code></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">☁  learning-git [master] ⚡ git <span class="keyword">commit</span> -m <span class="string">"modify README.md"</span></div><div class="line">[<span class="keyword">master</span> <span class="number">48</span>a04b0] <span class="keyword">modify</span> README.md</div><div class="line"> <span class="number">1</span> <span class="keyword">file</span> <span class="keyword">changed</span>, <span class="number">2</span> insertions(+)</div></pre></td></tr></table></figure>
<p>最后，输入最后一次 <code>git status</code>：</p>
<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">☁  learning-git [<span class="literal">master</span>] git status</div><div class="line">On branch <span class="keyword">master</span></div><div class="line"><span class="title">nothing</span> to commit, working tree clean</div></pre></td></tr></table></figure>
<h2 id="本节课的补充："><a href="#本节课的补充：" class="headerlink" title="本节课的补充："></a>本节课的补充：</h2><ul>
<li><p><code>git add</code> 是将修改内容或者新文件添加到本地缓存区</p>
</li>
<li><p>再用 <code>git commit</code> 将本地缓冲区的内容提交到本地仓库</p>
</li>
<li><p><code>git add</code> 的各种区别:</p>
<p>  <code>git add -A  // 添加所有改动</code></p>
<p>  <code>git add *     // 添加新建文件和修改，但是不包括删除</code></p>
<p>  <code>git add .    // 添加新建文件和修改，但是不包括删除</code></p>
<p>  <code>git add -u   // 添加修改和删除，但是不包括新建文件</code></p>
</li>
<li><p>在 <code>commit</code> 前撤销 <code>add</code>:</p>
<p>  <code>git reset &lt;file&gt; // 撤销提交单独文件</code></p>
<p>  <code>git reset        // unstage all due changes</code><br>  <code>add/commit</code> 前撤销对文件的修改:</p>
<p>  <code>git checkout -- README.md  // 注意, add添加后(同commit提交后)就无法通过这种方式撤销修改</code></p>
</li>
</ul>
<h1 id="『第三节课』版本退回"><a href="#『第三节课』版本退回" class="headerlink" title="『第三节课』版本退回"></a>『第三节课』版本退回</h1><h2 id="可以通过-git-log-查看提交历史"><a href="#可以通过-git-log-查看提交历史" class="headerlink" title="可以通过 git log 查看提交历史"></a>可以通过 <code>git log</code> 查看提交历史</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">commit <span class="number">48</span>a04b0f26cc80ed8ad000b9b64675142f6d9bcd</div><div class="line"><span class="symbol">Author:</span> GiHccTpD &lt;yanrancanfei<span class="subst">@163</span>.com&gt;</div><div class="line"><span class="symbol">Date:</span>   Wed Apr <span class="number">12</span> <span class="number">12</span>:<span class="number">08</span>:<span class="number">03</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    modify README.md</div><div class="line"></div><div class="line">commit a75f82682054606bdcec5c7f94590fff2d1de35c</div><div class="line"><span class="symbol">Author:</span> GiHccTpD &lt;yanrancanfei<span class="subst">@163</span>.com&gt;</div><div class="line"><span class="symbol">Date:</span>   Wed Apr <span class="number">12</span> <span class="number">11</span>:<span class="number">18</span>:<span class="number">59</span> <span class="number">2017</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    <span class="keyword">add</span> README.md</div></pre></td></tr></table></figure>
<h2 id="还可以通过-git-log-pretty-oneline-格式化输出提交信息："><a href="#还可以通过-git-log-pretty-oneline-格式化输出提交信息：" class="headerlink" title="还可以通过 git log --pretty=oneline 格式化输出提交信息："></a>还可以通过 <code>git log --pretty=oneline</code> 格式化输出提交信息：</h2><figure class="highlight llvm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">48</span>a<span class="number">04</span>b<span class="number">0</span>f<span class="number">26</span><span class="keyword">cc</span><span class="number">80</span>ed<span class="number">8</span>ad<span class="number">000</span>b<span class="number">9</span>b<span class="number">64675142</span>f<span class="number">6</span>d<span class="number">9</span>bcd modify README.md</div><div class="line">a<span class="number">75</span>f<span class="number">82682054606</span>bdcec<span class="number">5</span><span class="keyword">c</span><span class="number">7</span>f<span class="number">94590</span>fff<span class="number">2</span>d<span class="number">1</span>de<span class="number">35</span><span class="keyword">c</span> <span class="keyword">add</span> README.md</div></pre></td></tr></table></figure>
<p><code>48a04b0f26cc80ed8ad000b9b64675142f6d9bcd</code> 是 <code>commit id</code> 版本号,不同于 <code>SVN</code> 的数字版本号，<code>SHA1</code> 计算出来的一个非常大的数字，用十六进制表示。</p>
<h2 id="可以通过-git-reset-hard-HEAD-命令退回上一个版本"><a href="#可以通过-git-reset-hard-HEAD-命令退回上一个版本" class="headerlink" title="可以通过 git reset --hard HEAD^ 命令退回上一个版本:"></a>可以通过 <code>git reset --hard HEAD^</code> 命令退回上一个版本:</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">☁  learning-git [master] git <span class="keyword">reset</span> <span class="comment">--hard HEAD^</span></div><div class="line"><span class="keyword">HEAD</span> <span class="keyword">is</span> <span class="keyword">now</span> <span class="keyword">at</span> a75f826 <span class="keyword">add</span> README.md</div></pre></td></tr></table></figure>
<blockquote>
<p>此时，通过 <code>git log --pretty=oneline</code> 可以看到输出的是如下的信息：  <code>a75f82682054606bdcec5c7f94590fff2d1de35c add README.md</code></p>
</blockquote>
<h2 id="也可以通过-git-reset-hard-commit-id-来实现要退回的版本"><a href="#也可以通过-git-reset-hard-commit-id-来实现要退回的版本" class="headerlink" title="也可以通过 git reset --hard commit_id 来实现要退回的版本"></a>也可以通过 <code>git reset --hard commit_id</code> 来实现要退回的版本</h2><h2 id="命令-git-reflog-用来记录你的每一次命令"><a href="#命令-git-reflog-用来记录你的每一次命令" class="headerlink" title="命令 git reflog 用来记录你的每一次命令"></a>命令 <code>git reflog</code> 用来记录你的每一次命令</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">a75f826</span> <span class="selector-tag">HEAD</span>@&#123;0&#125;: <span class="selector-tag">reset</span>: <span class="selector-tag">moving</span> <span class="selector-tag">to</span> <span class="selector-tag">HEAD</span>^</div><div class="line">48<span class="selector-tag">a04b0</span> <span class="selector-tag">HEAD</span>@&#123;1&#125;: <span class="selector-tag">commit</span>: <span class="selector-tag">modify</span> <span class="selector-tag">README</span><span class="selector-class">.md</span></div><div class="line"><span class="selector-tag">a75f826</span> <span class="selector-tag">HEAD</span>@&#123;2&#125;: <span class="selector-tag">commit</span> (<span class="selector-tag">initial</span>): <span class="selector-tag">add</span> <span class="selector-tag">README</span><span class="selector-class">.md</span></div><div class="line">(<span class="selector-tag">END</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>补充：</strong> Git在内部有个指向当前版本的 <code>HEAD</code> 指针，它指向的版本就是当前版本。</p>
</blockquote>
<h1 id="『第四节课』工作区与暂存区"><a href="#『第四节课』工作区与暂存区" class="headerlink" title="『第四节课』工作区与暂存区"></a>『第四节课』工作区与暂存区</h1><h2 id="文件夹📂-learning-git-就是一个工作区"><a href="#文件夹📂-learning-git-就是一个工作区" class="headerlink" title="文件夹📂 learning-git 就是一个工作区"></a>文件夹📂 <code>learning-git</code> 就是一个工作区</h2><h2 id="版本库（Repository）-隐藏的文件夹📂-git-就是一个版本库"><a href="#版本库（Repository）-隐藏的文件夹📂-git-就是一个版本库" class="headerlink" title="版本库（Repository） 隐藏的文件夹📂 .git 就是一个版本库"></a>版本库（Repository） 隐藏的文件夹📂 <code>.git</code> 就是一个版本库</h2><p>如图所示：</p>
<p><img src="/2017/04/12/learn-git/Repository.png" alt="Repository"><br>图片来自: <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013745374151782eb658c5a5ca454eaa451661275886c6000" target="_blank" rel="external">廖雪峰的官方网站</a></p>
<p>前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p>
<ul>
<li>第一步是用 <code>git add</code> 把文件添加进去，实际上就是把文件修改添加到暂存区；</li>
<li>第二步是用 <code>git commit</code> 提交更改，实际上就是把暂存区的所有内容提交到当前分支。</li>
</ul>
<h2 id="操作演示"><a href="#操作演示" class="headerlink" title="操作演示"></a>操作演示</h2><p><img src="/2017/04/12/learn-git/Repository01.png" alt="Repository01"></p>
<h1 id="『第五节课』Git管理的是修改"><a href="#『第五节课』Git管理的是修改" class="headerlink" title="『第五节课』Git管理的是修改"></a>『第五节课』Git管理的是修改</h1><blockquote>
<p><strong>注意：</strong> 因为Git跟踪并管理的是修改，而非文件。</p>
</blockquote>
<h1 id="『第六节课』撤销修改"><a href="#『第六节课』撤销修改" class="headerlink" title="『第六节课』撤销修改"></a>『第六节课』撤销修改</h1><h2 id="当没有提交到缓冲区时"><a href="#当没有提交到缓冲区时" class="headerlink" title="当没有提交到缓冲区时"></a>当没有提交到缓冲区时</h2><p>通过使用命令 <code>git checkout -- README.md</code>  把 <code>README.md</code> 文件在工作区的修改全部撤销</p>
<p>一种是<code>README.md</code>自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；</p>
<p>一种是<code>README.md</code>已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。</p>
<p>总之，就是让这个文件回到最近一次<code>git commit</code>或<code>git add</code>时的状态。</p>
<h2 id="操作演示："><a href="#操作演示：" class="headerlink" title="操作演示："></a>操作演示：</h2><p><img src="/2017/04/12/learn-git/checkout.png" alt="checkout"></p>
<blockquote>
<p>在 <code>git status</code> 之前有一次修改。</p>
</blockquote>
<h2 id="当将修改的文件提交到缓冲区的时候"><a href="#当将修改的文件提交到缓冲区的时候" class="headerlink" title="当将修改的文件提交到缓冲区的时候"></a>当将修改的文件提交到缓冲区的时候</h2><p>首先，修改下文件。</p>
<h3 id="用命令-git-reset-HEAD-README-md-可以把暂存区的修改撤销掉（unstage），重新放回工作区"><a href="#用命令-git-reset-HEAD-README-md-可以把暂存区的修改撤销掉（unstage），重新放回工作区" class="headerlink" title="用命令 git reset HEAD README.md 可以把暂存区的修改撤销掉（unstage），重新放回工作区"></a>用命令 <code>git reset HEAD README.md</code> 可以把暂存区的修改撤销掉（unstage），重新放回工作区</h3><p><code>git reset</code>命令既可以回退版本，也可以把暂存区的修改回退到工作区。当我们用<code>HEAD</code>时，表示最新的版本。</p>
<h2 id="接下来，还要-使用命令-git-checkout-README-md-来丢弃工作区的修改"><a href="#接下来，还要-使用命令-git-checkout-README-md-来丢弃工作区的修改" class="headerlink" title="# 接下来，还要 使用命令 git checkout -- README.md 来丢弃工作区的修改"></a># 接下来，还要 使用命令 <code>git checkout -- README.md</code> 来丢弃工作区的修改</h2><h3 id="操作演示：-1"><a href="#操作演示：-1" class="headerlink" title="操作演示："></a>操作演示：</h3><p><img src="/2017/04/12/learn-git/checkout02.png" alt="reset"></p>
<p>然后通过  <code>git checkout -- README.md</code>  丢弃工作区修改</p>
<p><img src="/2017/04/12/learn-git/checkout03.png" alt="reset"></p>
<h1 id="『第七节课』删除文件"><a href="#『第七节课』删除文件" class="headerlink" title="『第七节课』删除文件"></a>『第七节课』删除文件</h1><h2 id="首先添加一个文件-vim-test-del-md-，-再随便添加点内容。"><a href="#首先添加一个文件-vim-test-del-md-，-再随便添加点内容。" class="headerlink" title="首先添加一个文件 vim test_del.md ， 再随便添加点内容。"></a>首先添加一个文件 <code>vim test_del.md</code> ， 再随便添加点内容。</h2><p> 然后本地删除文件 <code>rm -rf test_del.md</code> 文件</p>
<p>输入 <code>git status</code> 可以查看现在的状态，在下面的操作演示图片里面</p>
<h2 id="当你也要将版本库中的文件删除的时候，就可以输入-git-rm-test-del-md-将其删除啦"><a href="#当你也要将版本库中的文件删除的时候，就可以输入-git-rm-test-del-md-将其删除啦" class="headerlink" title="当你也要将版本库中的文件删除的时候，就可以输入 git rm test_del.md 将其删除啦"></a>当你也要将版本库中的文件删除的时候，就可以输入 <code>git rm test_del.md</code> 将其删除啦</h2><h2 id="当你是操作失误的时候，-可以输入-git-checkout-test-del-md-将版本库中的文件拉取出来，覆盖本地的版本"><a href="#当你是操作失误的时候，-可以输入-git-checkout-test-del-md-将版本库中的文件拉取出来，覆盖本地的版本" class="headerlink" title="当你是操作失误的时候， 可以输入 git checkout --test_del.md 将版本库中的文件拉取出来，覆盖本地的版本"></a>当你是操作失误的时候， 可以输入 <code>git checkout --test_del.md</code> 将版本库中的文件拉取出来，覆盖本地的版本</h2><h2 id="操作代码"><a href="#操作代码" class="headerlink" title="操作代码"></a>操作代码</h2><p><img src="/2017/04/12/learn-git/del.png" alt="del"></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> Git </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[十大经典排序算法]]></title>
      <url>http://blog.pikbug.me/2017/04/11/JS-Sorting-Algorithm/</url>
      <content type="html"><![CDATA[<h1 id="『转载』十大经典排序算法"><a href="#『转载』十大经典排序算法" class="headerlink" title="『转载』十大经典排序算法"></a>『转载』十大经典排序算法</h1><p><a href="https://sort.hust.cc/" target="_blank" rel="external">https://sort.hust.cc/</a></p>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> 数据结构与算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JavaScript创建对象的方式]]></title>
      <url>http://blog.pikbug.me/2017/04/09/JavaScript-ways-of-create-object/</url>
      <content type="html"><![CDATA[<blockquote>
<p><em>注意：</em> 本文来自阅读《JavaScript高级程序设计（第三版）》的笔记或者也可以称作是书摘吧👾</p>
</blockquote>
<a id="more"></a>
<h2 id="一般方式"><a href="#一般方式" class="headerlink" title="一般方式"></a>一般方式</h2><ul>
<li>构造函数</li>
<li>对象字面量</li>
</ul>
<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>这种模式抽象了创建具体对象的过程。如下例子所示。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createPerson</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    o.name =  name;</div><div class="line">    o.age = age;</div><div class="line">    o.job = job;</div><div class="line">    o.sayName = functioin () &#123;</div><div class="line">        alert (<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> o;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实例化两个类</span></div><div class="line"><span class="keyword">var</span> person1 = createPerson(<span class="string">'xixi'</span>, <span class="number">29</span>, <span class="string">'Software Engineer'</span>);</div><div class="line"><span class="keyword">var</span> person2 = createPerson(<span class="string">'waXaw'</span>, <span class="number">27</span>, <span class="string">'teacher'</span>);</div></pre></td></tr></table></figure>
<p>虽然解决了常见太多相似类的问题，但却没有解决对象识别的问题。</p>
<h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><p>像 <code>Array</code> 和 <code>Object</code> 这样的原生构造函数，在运行时会自动创建执行环境，还可以自定义对象属性和方法。如下例子所示。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name =  name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">    <span class="keyword">this</span>.sayName = functioin () &#123;</div><div class="line">        alert (<span class="keyword">this</span>.name);</div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 实例化两个类</span></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'xixi'</span>, <span class="number">29</span>, <span class="string">'Software Engineer'</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'waXaw'</span>, <span class="number">27</span>, <span class="string">'teacher'</span>);</div></pre></td></tr></table></figure>
<p>与之前的工厂模式对比可以有以下发现：</p>
<ul>
<li>没有显式地创建对象</li>
<li>直接将属性和方法赋给了 <code>this</code> 对象</li>
<li>没有 <code>return</code> 语句</li>
</ul>
<p><em>注意：</em> 构造函数应该以一个大写字母开头</p>
<p>实例化一个对象，要经过以下步骤：</p>
<ol>
<li>创建一个新对象</li>
<li>将构造函数的作用域赋值给新对象（因此 <code>this</code> 就指向了这个新对象）</li>
<li>执行构造函数中的代码（为这个类对象添加属性）</li>
<li>返回对象</li>
</ol>
<p><code>person1</code> 和 <code>person2</code> 分别保存着 <code>Person</code> 类的一个不同的实例。 这个两个对象都有一个 <code>constructor</code> （构造函数）属性，该属性指向 <code>Person</code>。<br>创建自定义的构造函数意味着将来可以将它的实例为一种特定的类型，此处正是构造函数模式胜过工厂模式的地方。</p>
<p>构造函数是一种特殊的函数，他可以通过 <code>new</code> 操作符来调用。</p>
<h3 id="构造函数调用方式："><a href="#构造函数调用方式：" class="headerlink" title="构造函数调用方式："></a>构造函数调用方式：</h3><ul>
<li>1.当做构造函数使用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'xixi'</span>, <span class="number">29</span>, <span class="string">'Software Engneer'</span>);</div><div class="line">person.sayName(); <span class="comment">//'xixi'</span></div></pre></td></tr></table></figure>
<ul>
<li>2.作为普通函数使用</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Person(<span class="string">'waXaw'</span>, <span class="number">24</span>, <span class="string">'Teacher'</span>);</div><div class="line"><span class="built_in">window</span>.sayName(); <span class="comment">//'waXaw'</span></div></pre></td></tr></table></figure>
<ul>
<li>3.在对象的另一个作用域中调用</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">Person.call(o, <span class="string">'mig'</span>, <span class="number">23</span>, <span class="string">'CEO'</span>);</div><div class="line">o.sayName(); <span class="comment">//'mig'</span></div></pre></td></tr></table></figure>
<h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><p>构造函数的方法 （即 <code>sayName</code> ）每次都要重新创建一遍。也就是说 <code>person1</code> 和 <code>person2</code> 的 <code>sayName</code> 不是同一个 <code>Function</code> 创建的。<br>可以通过</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alert(person1.sayName === person2.sayName()); <span class="comment">// false</span></div></pre></td></tr></table></figure>
<p><strong>解决方法：</strong><br>函数定义转移到构造函数的外部。如下例所示。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.name =  name;</div><div class="line">    <span class="keyword">this</span>.age = age;</div><div class="line">    <span class="keyword">this</span>.job = job;</div><div class="line">    <span class="keyword">this</span>.sayName =sayName;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">functioin sayName() &#123;</div><div class="line">        alert (<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">// 实例化两个类</span></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'xixi'</span>, <span class="number">29</span>, <span class="string">'Software Engineer'</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'waXaw'</span>, <span class="number">27</span>, <span class="string">'Teacher'</span>);</div></pre></td></tr></table></figure>
<p><strong>新的问题：</strong></p>
<ul>
<li><code>sayName</code> 使得全局变量名不副实</li>
<li>自定义的引用类型没有了封装性可言</li>
</ul>
<h2 id="原型模型"><a href="#原型模型" class="headerlink" title="原型模型"></a>原型模型</h2><blockquote>
<p><strong>原型（ <code>prototype</code> ）属性：</strong></p>
<p>这个属性是一个指针，指向一个对象，这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。<code>prototype</code> 就是通过构造函数而创建的那个对象实例的原型对象。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Person.prototype.name = <span class="string">'Nicholas'</span>;</div><div class="line">Person.prototype.age = <span class="number">29</span>;</div><div class="line">Person.prototype.job = <span class="string">'Software Engneer'</span>;</div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  alert(<span class="keyword">this</span>.name);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</div><div class="line">person1.sayName(); <span class="comment">// 'Nicholas'</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person();</div><div class="line">person2.sayName(); <span class="comment">// 'Nicholas'</span></div><div class="line"></div><div class="line">alert(person1.sayName === person2.sayName); <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="理解原型对象"><a href="#理解原型对象" class="headerlink" title="理解原型对象"></a>理解原型对象</h3><p>当创建一个新函数的时候，就会创建一个 <code>prototype</code> 属性，这个属性指向函数的原型对象。在默认情况下，所有原型对象会自动获得一个  <code>constractor</code> （构造函数）属性，这个属性包含一个指向 <code>prototype</code> 属性所在函数的指针。如图所示，<code>Person.prototype.constructor</code> 指向 <code>Person</code> 。也就是说，可以通过这个构造函数为原型对象添加其他属性和方法。 </p>
<p><a href="JavaScript-ways-of-create-object/prototype.png">prototype</a> </p>
<blockquote>
<p><strong>注意：</strong> 虽然可以通过对象实例访问保存在原型中的值，却不能通过对象实例重写原型中的值。</p>
<p>如果在实例中添加一个属性，该属性与实例中的一个属性同名，那在实例中常见该对象，该属性会将原型中的那个属性屏蔽。</p>
<p><code>hasOwnProperty()</code> 方法可以检测一个属性存在于实例中还是原型中。这个方法只在给定属性存在于对象实例中时，就会返回 <code>true</code> 。</p>
</blockquote>
<h3 id="原型与-in-操作符"><a href="#原型与-in-操作符" class="headerlink" title="原型与 in 操作符"></a>原型与 <code>in</code> 操作符</h3><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul>
<li>单独使用。 <code>in</code> 操作符会在通过对象能够访问对象时返回 <code>true</code> ，无论存在于实例还是原型中。</li>
<li><code>for-in</code> 循环。返回的是所有能够通过对象访问的、可枚举的（enumerated）属性，既包括存在于实例中的属性和原型中的属性。不可枚举的 <code>constructor</code> 属性，可以通过 <code>Object.keys()</code> 和 <code>Object.getOwnPropertyName()</code> 方法来替代 <code>for-in</code> 循环。</li>
</ul>
<h4 id="更简单的原型语法"><a href="#更简单的原型语法" class="headerlink" title="更简单的原型语法"></a>更简单的原型语法</h4><p>可以通过如下方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="attr">name</span>: <span class="string">'Nicholas'</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">29</span>,</div><div class="line">  <span class="attr">job</span>: <span class="string">'Software Engineer'</span>,</div><div class="line">  <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的代码将 <code>Person.prototype</code> 设置为等于一个以对象字面量形式创建的对象。</p>
<p><strong>例外</strong> <code>constructor</code> 属性不再指向 <code>Person</code> 。</p>
<p>为了解决上面的问题，可以如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span> (<span class="params"></span>) </span>&#123;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="attr">constructor</span>: Person,</div><div class="line">  <span class="attr">name</span>: <span class="string">'Nicholas'</span>,</div><div class="line">  <span class="attr">age</span>: <span class="number">29</span>,</div><div class="line">  <span class="attr">job</span>: <span class="string">'Software Engineer'</span>,</div><div class="line">  <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong> 以此方式重设 <code>constructor</code> 属性将会导致他的 <code>[[Enumerable]]</code> 特性被设置为 <code>true</code> 默认情况下， <code>constructor</code> 属性是不可枚举的</p>
</blockquote>
<h3 id="原型的动态"><a href="#原型的动态" class="headerlink" title="原型的动态"></a>原型的动态</h3><blockquote>
<p><strong>注意：</strong> 实例中的指针仅指向原型，而不是指向构造函数。</p>
</blockquote>
<h3 id="原生对象的原型"><a href="#原生对象的原型" class="headerlink" title="原生对象的原型"></a>原生对象的原型</h3><ul>
<li><p>可以取得默认方法的引用。例如。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">alert(<span class="keyword">typeof</span> <span class="built_in">Array</span>.prototype.sort);  <span class="comment">// 'function'</span></div><div class="line">alert(<span class="keyword">typeof</span> <span class="built_in">String</span>.prototype.substring);   <span class="comment">//function</span></div></pre></td></tr></table></figure>
<p>​</p>
</li>
<li><p>还可以定义新方法</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">String</span>.prototype.startWith = <span class="function"><span class="keyword">function</span> (<span class="params">text</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.indexOf(text) === <span class="number">0</span>;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> msg = <span class="string">'Hello World!'</span>;</div><div class="line">alert(msg.startWith(<span class="string">'Hello'</span>));   <span class="comment">//true</span></div></pre></td></tr></table></figure>
<blockquote>
<p><strong>注意：</strong> 不建议在产品化的程序中修改原生对象的原型。</p>
</blockquote>
<h3 id="原型对象的问题"><a href="#原型对象的问题" class="headerlink" title="原型对象的问题"></a>原型对象的问题</h3><ul>
<li>省略了为构造函数传递初始化参数这一环节，导致所有实例在默认情况下都将取得相同的属性值。</li>
<li>最大的问题在于其共享的本性导致的。原型中所有属性都是实例共享的。对于函数适合。但是对于类型值的属性来说，问题就突出了。</li>
</ul>
<h2 id="组合使用构造函数和原型模式"><a href="#组合使用构造函数和原型模式" class="headerlink" title="组合使用构造函数和原型模式"></a>组合使用构造函数和原型模式</h2><blockquote>
<p>创建自定义类型的最常见方式。</p>
</blockquote>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>构造函数模式用于定义实例属性；原型模式用于定义方法和共享的属性。</p>
<h4 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h4><ul>
<li>每个实例都会有自己的一份实例属性的副本</li>
<li>但同时又共享着对方法的引用</li>
<li>最大限度的节省内存。</li>
<li>还支持向构造函数传递参数</li>
</ul>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.job = job;</div><div class="line">  <span class="keyword">this</span>.friends = [<span class="string">'Shelby'</span>, <span class="string">'Court'</span>];</div><div class="line">&#125;;</div><div class="line"></div><div class="line">Person.prototype = &#123;</div><div class="line">  <span class="attr">constructor</span>: Person,</div><div class="line">  <span class="attr">sayName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> Person(<span class="string">'Nicholas'</span>, <span class="number">29</span>, <span class="string">'SoftWare Engineer'</span>);</div><div class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> Person(<span class="string">'Greg'</span>, <span class="number">27</span>, <span class="string">'Doctor'</span>);</div><div class="line"></div><div class="line">person1.friends.push(<span class="string">'Van'</span>);</div><div class="line">alert(person1.friends); <span class="comment">// 'Shelby, Court, Van'</span></div><div class="line">alert(person2.friends); <span class="comment">// 'Shelby, Court'</span></div><div class="line">alert(person1.friends === person2.friends); </div><div class="line">  <span class="comment">// false</span></div><div class="line">alert(person1.sayName === person2.sayName);</div><div class="line">  <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>此种方式是目前 <code>ECMAScript</code> 中使用<strong>最广泛</strong>、<strong>认同度最高</strong>的一种创建自定义类型的方法。 换句话说，这是用来定义引用类型的一种默认模式。</p>
<h2 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h2><p>动态原型模式将所有信息封装在构造函数中，而通过在构造函数中初始化原型（<strong>仅在必要的情况下</strong>），又保持了同事使用构造函数和原型的优点。如例子所示。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="comment">// 属性</span></div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.age = age;</div><div class="line">  <span class="keyword">this</span>.job = job;</div><div class="line">  <span class="comment">// 方法</span></div><div class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.sayName != <span class="string">'function'</span>) &#123;</div><div class="line">    Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">      alert(<span class="keyword">this</span>.name);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person(<span class="string">'Nicholas'</span>, <span class="number">29</span>, <span class="string">'Software Engineer'</span>);</div><div class="line">friend.sayName();</div></pre></td></tr></table></figure>
<h2 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h2><blockquote>
<p>主要思想： 创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后返回新的对象。下面是例子。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> o = &#123;&#125;;</div><div class="line">  o.name = name;</div><div class="line">  o.age = age;</div><div class="line">  o.job = job;</div><div class="line">  o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(<span class="keyword">this</span>.name);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> o;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> Person(<span class="string">'Nicholas'</span>, <span class="number">29</span>, <span class="string">'Software Engineer'</span>);</div><div class="line">friend.sayName(); <span class="comment">// 'Nicholas'</span></div></pre></td></tr></table></figure>
<p>补充说明：</p>
<ul>
<li>返回的对象与构造函数或者与构造函数的原型属性之间没有关系，也就是说构造函数返回的对象与在构造函数外创建的对象没有什么不同。</li>
<li>不能依赖 <code>instanceof</code> 操作符来确定对象类型。</li>
<li>在能使用别的模式的情况下，不要使用该模式。</li>
</ul>
<h2 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h2><h3 id="是什么？"><a href="#是什么？" class="headerlink" title="是什么？"></a>是什么？</h3><p>没有公共属性 | 其方法也不引用 <code>this</code> 的对象</p>
<h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</div><div class="line">  <span class="comment">// 创建一个返回的对象</span></div><div class="line">  <span class="keyword">var</span> o = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">  <span class="comment">// 可以在这里定义私有变量和函数</span></div><div class="line">  </div><div class="line">  <span class="comment">// 添加方法</span></div><div class="line">  o.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    alert(name);</div><div class="line">  &#125;;</div><div class="line">  <span class="keyword">return</span> o;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> friend = Person(<span class="string">'Nicholas'</span>, <span class="number">29</span>, <span class="string">'Software Engineer'</span>);</div><div class="line">friend.sayName(); <span class="comment">// 'Nicholas'</span></div></pre></td></tr></table></figure>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
            <category> JavaScript </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> JavaScript </tag>
            
            <tag> JavaScript高级程序设计（第三版） </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo个人博客搭建遇到的问题-01]]></title>
      <url>http://blog.pikbug.me/2017/04/06/Hexo-problems-01/</url>
      <content type="html"><![CDATA[<h1 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h1><ul>
<li>如图1、2</li>
</ul>
<p><img src="/2017/04/06/Hexo-problems-01/QQ20170406-172817@2x.png" alt="1"><br><a id="more"></a><br><img src="/2017/04/06/Hexo-problems-01/QQ20170406-173821@2x.png" alt="2"></p>
<p>对比可知，在<strong>发表于</strong>、<strong>更新于</strong>、<strong>分类于</strong>、<strong>阅读</strong>前边加了一些提示的icon。</p>
<ul>
<li><strong>分析问题</strong></li>
</ul>
<p>一开始我以为存在的问题是我的next主题没有配置好，也就是next目录下的 <code>_config.yml</code> 没配置好，百度、谷歌了好久，没找到答案。<br>后来就去页面看那个icon属于哪一个class，无意之间想去看看class的css文件终于发现了问题所在</p>
<ul>
<li><strong>如图3</strong></li>
</ul>
<p><img src="/2017/04/06/Hexo-problems-01/next配置问题.png" alt="3"></p>
<ul>
<li>找到问题所在</li>
</ul>
<p>一开始图中的display属性是 <code>none</code> 。</p>
<ul>
<li><strong>最后</strong></li>
</ul>
<p>每次解决问题都是在想放弃的时候，感觉很平淡。QAQ</p>
]]></content>
      
        <categories>
            
            <category> 个人博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 个人博客 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[博客更新日志]]></title>
      <url>http://blog.pikbug.me/2017/04/06/web-logs/</url>
      <content type="html"><![CDATA[<h1 id="2016-11-21-更新内容："><a href="#2016-11-21-更新内容：" class="headerlink" title="2016-11-21 更新内容："></a>2016-11-21 更新内容：<a id="more"></a></h1><h2 id="完成主要的框架工作"><a href="#完成主要的框架工作" class="headerlink" title="完成主要的框架工作"></a>完成主要的框架工作</h2><blockquote>
<ul>
<li>熟悉Hexo</li>
<li>GitHub创建仓库、初始化项目</li>
<li>选取并且确定了Next主题</li>
<li><del>绑定域名blog.pikbug.me</del></li>
<li>新增一篇测试文章</li>
</ul>
</blockquote>
<h1 id="2017-02-18-更新内容："><a href="#2017-02-18-更新内容：" class="headerlink" title="2017-02-18 更新内容："></a>2017-02-18 更新内容：</h1><h2 id="主要完成了Next主题的配置工作"><a href="#主要完成了Next主题的配置工作" class="headerlink" title="主要完成了Next主题的配置工作"></a>主要完成了Next主题的配置工作</h2><blockquote>
<ul>
<li>添加「标签」页面</li>
<li>添加「分类」页面</li>
<li>增加404页面</li>
<li><del>增加多说评论</del></li>
<li><del>增加多说分享</del></li>
<li><del>增加cnzz统计</del></li>
<li>增加Algolia搜索功能（未成功奏效）</li>
<li>配置侧边栏的签名</li>
<li>新增一篇测试文章《&lt;暗时间&gt;书摘》</li>
<li>配置RSS</li>
</ul>
</blockquote>
<h1 id="2017-04-06-更新内容："><a href="#2017-04-06-更新内容：" class="headerlink" title="2017-04-06 更新内容："></a>2017-04-06 更新内容：</h1><h2 id="进一步完成主题配置-使功能正常使用"><a href="#进一步完成主题配置-使功能正常使用" class="headerlink" title="进一步完成主题配置 使功能正常使用"></a>进一步完成主题配置 使功能正常使用</h2><blockquote>
<ul>
<li>配置header 确定「首页」、「关于」、「归档」、「标签」、「搜索」</li>
<li>配置Algolia搜索功能，成功运行</li>
<li>增加谷歌统计功能</li>
<li>增加网易云跟帖功能，替代多说评论功能</li>
<li>增加JiaThis分享功能，替代多说分享功能</li>
<li>增加侧边栏版权说明</li>
<li>增加侧边栏社交链接</li>
<li>增加侧边栏友情链接</li>
<li>取消cnzz统计功能</li>
<li>增加阅读次数统计LeanCloud</li>
<li>编辑了footer 样式修改</li>
<li>更换域名解析 将域名解析由 <del><code>blog.pikbug.me</code></del> 改为 <code>pikbug.me</code><br>  <em><em>注意：</em></em> <ol>
<li>更改域名解析之前前要将 <code>source/</code> 的 <code>CNAME</code> 文件中解析到的地址改成你要解析到的地址 也就是 <code>pikbug.me</code></li>
<li>不知道到底要不要将 <code>blog</code> 下的 <code>.deploy_git</code> 删除掉在进行 如下操作，我是删掉了该目录</li>
<li>首先执行 <code>hexo algolia</code> 命令，刷新索引，当algolia网站的 <code>Indices</code> 页面显示如图所示<br><img src="/2017/04/06/web-logs/algolia-update-indexes.png" alt="png"><br>说明操作成功</li>
<li>再执行 <code>hexo g -d</code> 命令就可以生成静态博客并推送到GitHub了</li>
</ol>
</li>
<li>增加 <strong>发布于</strong>、<strong>更新于</strong>等多个标签前的icon 详情请看 <a href="http://pikbug.me/2017/04/06/Hexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%981/" target="_blank" rel="external">这篇文章</a></li>
</ul>
</blockquote>
<h1 id="2017-04-07-更新内容："><a href="#2017-04-07-更新内容：" class="headerlink" title="2017-04-07 更新内容："></a>2017-04-07 更新内容：</h1><h2 id="进一步完成主题配置-完善网页显示"><a href="#进一步完成主题配置-完善网页显示" class="headerlink" title="进一步完成主题配置 完善网页显示"></a>进一步完成主题配置 完善网页显示</h2><blockquote>
<ul>
<li>增加版权声明 如图：<br><img src="/2017/04/06/web-logs/creative-commons.png" alt="creative-commons"></li>
<li>修改了一个菜单的icon 如图</li>
<li>将鼠标滑过标题链接时的显示颜色由黑色改为绿色<br><img src="/2017/04/06/web-logs/2017-04-07-update.png" alt="2017-04-07-update"></li>
<li>将网站的头像（avator.png）有正方形改为圆形</li>
</ul>
</blockquote>
<h1 id="2017-06-05-更新内容："><a href="#2017-06-05-更新内容：" class="headerlink" title="2017-06-05 更新内容："></a>2017-06-05 更新内容：</h1><ul>
<li><p>添加 “分类页面”以及“分类”导航</p>
</li>
<li><p>规范分类类别</p>
<p><img src="/2017/04/06/web-logs/屏幕快照 2017-06-05 21.09.22.png" alt=""></p>
</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 学习笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 个人博客 </tag>
            
            <tag> web-logs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[暗时间]]></title>
      <url>http://blog.pikbug.me/2016/11/21/anshijian/</url>
      <content type="html"><![CDATA[<h1 id="知识结构"><a href="#知识结构" class="headerlink" title="知识结构"></a>知识结构</h1><p>1.抓住不变量。<br>1️⃣底层知识：英语以及编程的语法知识等<br>2️⃣工具<br>3️⃣要熟悉自己的工具 熟练运用 熟悉运用<br><a id="more"></a></p>
<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>本质：学习新知识的带着第三只眼睛判断哪些知识是变量，或者不易变量，是否可以在用的时候查手册即可。<br>🤔补充：学习新知识的时候：⚡︎本质是什么；第一原则是什么；改制时的（体系或者层次）结构是什么。<br>😀现在是一个信息泛滥的时代，→需要学会在浩瀚的信息中选择我们需要的信息；→避免被不好的信息左右我们的大脑。<br>习惯的养成<br>〶江山易改，本性难移。<br>我们评价一个信念的标准是satisficing原则，即足够，能行就好。<br>🙃可以改变习惯<br>1️⃣认识到习惯的改变不是一两天实现的，承认它的难度；<br>2️⃣真想改掉自己习惯，注意观察自己的习惯，把要克服的习惯的那个自我当做自己的一个孩子，然后去打败他；<br>🐷我喜欢这句话：知难而不退，值得做的事情几乎总是如此😀。<br>我在南大的七年<br>父亲告诉我的第二件事情是：遇到问题，找书去就行。<br>🤔改变一生的两个习惯：1️⃣学习东西不觉得是累，自得其乐。2️⃣学习新东西的方法。<br>🐶与父母共同的性格：遇到麻烦和困难的事情从不放弃。<br>🐱我在CSDN上开了博客，开始学习C++和编程中的一些总结。这个博客一直写到离开南大，伴随了我真个七年的学习和成长，回过头去看像时光机一样，能够看到一路过来我都关注了什么是怎么想的，以及对一些事情的看法是怎么变化的。这些东西如果不记录下来，会逐渐忘记，也就无法参照过去的自己，对未来提供更好的借鉴了。所以我一直把记录当做一个很重要的工具。另外我也同感这个博客认识了很多朋友，得到了很多的帮助。</p>
<h1 id="逃出你的肖申克（一）"><a href="#逃出你的肖申克（一）" class="headerlink" title="逃出你的肖申克（一）"></a>逃出你的肖申克（一）</h1><p>为什么我们常说很多时候一定邀请神经理之后才明白<br>1️⃣切身体会。亲身经理负面事件带来的情绪反应比看着或者听说别人遭受一个同样的时间感受到的强烈的多，形成的情绪记忆更持久。心理学上，自己无法从强度上真正感同身受别人的痛苦。<br>2️⃣别人口中的故事。别人口中的故事也许只是他们的想法，你自己亲身经历同样的事情也许完全有事另外一种想法。<br>3️⃣为什么。很难说服自己A选项优于B选项，直到最终自己在某一条路上撞了南墙才肯死心。<br>4️⃣世界是复杂的。各种错综复杂的因素和响应下，用单一因果来解释事件几乎总是不恰当的。<br>5️⃣未来是不确定的。外界因素是不可控的，我们能做得到只是做好头脑准备，尽量不错失机会。成功并不是仅仅取决于个人因素。个人因素往往只是成功的一个既非充分又非必要的条件，所谓谋事在人成事在天；但无需悲观，因为毫无疑问的是，改变个人因素的却能够增加成功的几率。<br>6️⃣别人的道理，自己的事情。<br>🐹解决问题的两步思维步骤：①根据问题从记忆系统中提取以往成功的方案；②多多思考观察自己，抽象其本质。<br>7️⃣认知失调与自我辩护<br>8️⃣失败即成功<br>9️⃣情绪对照<br>🔟天性 ①一个理性大脑②一个原始大脑。 如果你总是感到满足的话，就不会去进取，在一个残酷的优胜劣汰的环境中，你的这种不思进取的基因就会被淘汰。<br>我们常常需要用理性的声音去说服内心的原始人。<br>十一 习惯</p>
<p>亲身经历了就一定明白吗<br>⒈很傻很天真的条件反射<br>①没有得到好的结果并不代表你的过程就错了<br>②结果正确也不代表方法就一定正确<br>③客观做法：而不是看着单次的结果 —— 因为再好的过程也可能会偶尔失利，但从长远统计来看，好的过程总体上必然导致好的结果（《别做正常的傻瓜》第12章：“抓住老鼠的一定是好猫吗 —— 结果偏见”对此介绍）<br>⒉认知偏见<br>推荐书籍《How we know what isn’t so》 其中包含一些经典的谬误<br>⒊情绪系统<br>①日常的决策与判断强烈地依赖与情绪系统的输出<br>②始终别忘记情绪系统只是一个比较粗糙的判断与决策系统，并且它很多时候是为了适应远古时代而非现代社会的。</p>
<p>不需要亲历也能够明白——理性的力量<br>①我满大多是让事实替代我们进行思考和推理，我们从失败当中获得信息。<br>②人最强大的能力是社会学习：普通人从自己的错误中学习，聪明人从别人的错误中学习。<br>③人最强大的另外一个能力则是：归纳和判断。<br>∑我们再打澳洲越走越远，在现实中越走越稳。我们在大脑中失败的次数越多，在现实中失败的次数就会越少。<br>我的感受：多思考！</p>
<h1 id="逃出你的肖申克（二）"><a href="#逃出你的肖申克（二）" class="headerlink" title="逃出你的肖申克（二）"></a>逃出你的肖申克（二）</h1><p>①这些先验假设并不蕴藏咋图片中，而是在我们长期的生活中无意识统计出来的，或者干脆就是漫长的进化过程中帅选出来的有价值的先验假设——正如婴儿天生吃奶起就懂得吮吸一样。<br>②有时候打破偏见的唯一途径就是开阔视野，多积累知识，以及和具有不同知识背景的人讨论。—— 当你知道越多你就懂得越少<br>③需要与不同背景的人进行讨论，弥补个人经验知识的局限性导致的偏差，并时常使用以下两句话来提醒自己保持Open Mind：这只是一种可能；<br>想不出其他解释不代表就不存在其他的解释。</p>
<h1 id="逃出你的肖申克（三）"><a href="#逃出你的肖申克（三）" class="headerlink" title="逃出你的肖申克（三）"></a>逃出你的肖申克（三）</h1><p>——遇见20万年前的自己<br>①世界上最痛苦的事情不是和别人作斗争，而是和自己作斗争。<br>②大脑决策：直觉进行决策；理性分析<br>③emotion和motion在词源上是同源词。人们了解到了情绪和动力的关系<br>④我们对于未来的惩罚和收益估计不足，更倾向于就眼下的损益进行决策，会导致我们目光短浅。<br>⑤很多时候我们只是生活在信息社会的远古人。</p>
<h1 id="逃出你的肖申克（四）"><a href="#逃出你的肖申克（四）" class="headerlink" title="逃出你的肖申克（四）"></a>逃出你的肖申克（四）</h1><p>1⃣️当你觉得自己想的很有道理，无懈可击，客观公正的时候，你是否真正像你认为的那样客观公正呢？Artemus Ward曾经说过：“并不是那些我们不知道的事情让我们陷入麻烦，而是那些我们认为自己知道，却实际上是错误的知识，让我们陷入麻烦。”客观意味着承认存在未知信息的可能性，理性意味着能够从对立面的视角去看问题和思考。<br>2⃣️学会质疑自己<br>3⃣️与其让别人指出自己的错误，不如自己试着去发现自己的错误。<br>4⃣️大脑符合用进废退的原理，越经常使用的区域越发达。<br>5⃣️习惯之所以难以改变改变，就是因为习惯是自我巩固的——越用越强，越强越用。<br>6⃣️能够改变既有的习惯，依靠的不是自制力，而是知识。<br>7⃣️分散注意力<br>书写时为了更好地思考<br>书写的好处：<br>1⃣️书写是对思维的备忘。<br>2⃣️书写是对思维的缓存。<br>3⃣️书写是与自己的对话<br>4⃣️书写是与别人的交流<br>5⃣️有时候，语言自己也会思考</p>
<h1 id="为什么你从现在开始就应该写博客"><a href="#为什么你从现在开始就应该写博客" class="headerlink" title="# 为什么你从现在开始就应该写博客"></a># 为什么你从现在开始就应该写博客</h1><p>🙃写一个博客有很多的好处，却没有任何明显的坏处<br>🐹用博客的形式来记录下你有价值的思考，会带来很多好处，却没有很明显的坏处。<br>1⃣️能够交到很多志同道合的朋友<br>2⃣️书写是为了更好地思考<br>3⃣️“教”是最好的“学”。一旦你把自己潜意识里面的东西从幕后拉出来，你就有了面对并反思它们的可能性，而不是任它们的可能性，而不是任它们在幕后阴险地左右你的思维。去教一个完全不懂的人，则是一个最强大和彻底的反思途径<br>4⃣️讨论是绝佳的反思比较你和别人观念之间的差别，进一步讨论中她们就会不断迫使对方拿出更深层滋的理由。<br>5⃣️激励你去持续学习和思考。<br>6⃣️学会持之以恒地做一件事情<br>7⃣️一个长期的价值博客是一份很好的简历。<br>怎样做到长期写一个价值博客<br>因为你在思考和总结从而必须写下里，写博客也就变成了副产品。<br>让你自己成为一个持续学习和思考的人，并只写你真正思考和总结的产物，其他的一切都会随之而来。——只做你最感兴趣的事情，钱会随之而来。<br>可能出现的问题以及怎样应对<br>意志力很大程度上来源于正确的方法，而非天生。<br>1⃣️担心别人认为没有价值。<br>2⃣️担心想法太幼稚或有漏洞等等被别人笑话。<br>3⃣️得不到鼓励 overnight success takes a long time（一夜成名需要很长时间）<br>4⃣️写不出来  能够吧问题长时间停留在潜意识中是一种技能，能够嗲来很大的好处，停留越久你越琢磨得透彻，比别人看到的就越多。<br>我不想与我不能<br>自利归因 就是对一件事情发生的原因归结为对自己有利的那种情况。——不能给自己难堪，不能让自己下不来台。功劳都给自己买责任都给别人担。<br>自利归因表现形式：注意力等于现实。即，观察者偏见所起的作用就像一个过滤器——唯心主义人择原理的话就是——世界是这个样子就因为我看到他是这个样子的。</p>
<p>遇到问题为什么应该自己动手<br>知其所以然<br>🐹我们要的不是相对论，而是诞生相对论的那个大脑。我们要的不是金蛋，而是下金蛋的那只鸡。<br>思考问题的两种思维方式：<br>1⃣️联想。此方式不是最佳的思维方式。充满了错误的可能。<br>2⃣️演绎&amp;归纳。比“联想”的思维方式好一点。<br>人类解决问题的两大思维方式实际上都有很大的试错成分（探索）。<br>😎当我们遇到问题时：<br>1⃣思维的漫长繁杂的过程已经在大脑里面淡化的差不多了；<br>2⃣思维过程对我们的空气和水，而“鱼是最后一个感觉到水的”，我们感觉不到思维法则本身的存在，我们只是不知不觉运用它。<br>3⃣我们的目标是问题的解，过程是过程。目的是目的。<br>4⃣感到介绍思维过程是不相干的。不能放弃对求解过程。<br>思维过程的极其重要的价值：<br>1.内隐化<br>2.跨情景运用。思维法则也是记忆。<br>3.对问题解的更多记忆提取线索<br>4.包含了多得多的知识。<br>5.重在分析推理，而不是联想。<br>6.寻找该算法的原始出处。<br>7.原始出处气势未必就都推心置腹和你讲的那么到位。<br>8.不仅仅学习别人的思路，整理自己的思路也是极其重要的。<br>为什么有必要知其所以然</p>
]]></content>
      
        <categories>
            
            <category> 阅读吧！ </category>
            
            <category> 书摘 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 书摘 </tag>
            
            <tag> 读书 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[第一篇日志]]></title>
      <url>http://blog.pikbug.me/2016/11/21/Hello-Blog/</url>
      <content type="html"><![CDATA[<h2 id="第一篇日志"><a href="#第一篇日志" class="headerlink" title="第一篇日志"></a>第一篇日志</h2><p>这是一个新的开始，花了一下午外加一晚上的时间，差不多趟了所有的坑。<br><a id="more"></a><br>终于搭好了个人博客。接下来的日子，就需要慢慢来优化了！大家拭目以待！</p>
]]></content>
      
        <categories>
            
            <category> 个人博客 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
